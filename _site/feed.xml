<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="https://bradkwon.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://bradkwon.github.io/" rel="alternate" type="text/html" /><updated>2018-01-02T19:11:52+01:00</updated><id>https://bradkwon.github.io/</id><title type="html">Brad Kwon</title><subtitle>Brad Kwon's personal website. The introduction, the portfolio and blogs about programming and life of Brad Hyeongu Kwon.</subtitle><entry><title type="html">책 읽기 방법에 대한 나의 결론</title><link href="https://bradkwon.github.io/blog/2018/01/02/reading-method/" rel="alternate" type="text/html" title="책 읽기 방법에 대한 나의 결론" /><published>2018-01-02T00:00:00+01:00</published><updated>2018-01-02T00:00:00+01:00</updated><id>https://bradkwon.github.io/blog/2018/01/02/reading-method</id><content type="html" xml:base="https://bradkwon.github.io/blog/2018/01/02/reading-method/">&lt;p&gt;
나는 책을 읽을 때 주로 속으로 글을 읽으면서 읽는다. 속발음이라고 하는 것 같은데 속도가 무척 느리다. 그러다보니 책 한 권을 다 읽는데
시간이 너무 오래 걸리고 흐름이 잘 끊겨서 스토리가 잘 생각이 안 나는 경우가 허다하다.
&lt;/p&gt;
&lt;p&gt;
보통의 경우 속으로 소리내어 읽지 않고 눈으로만 읽는다고 하는데, 이를 묵독이라고 한다, 글쎄, 시도는 해 보았지만 잘 되지 않는다. 속독을 해 보려는 시도는 번번이 실패한다. 그래서 그냥 있는 그대로 자연스럽게 읽기로 했다. 대신 책을 다 읽고나면 후기를 꼭 남겨서 다시 한 번 되새겨 보는 걸로 책 읽는 방법에 대한 나의 오래된 고민을 해결하려 한다.
&lt;/p&gt;
&lt;p&gt;
속도는 엄청 느리겠지만 적어도 안 읽는 것보단 나을거라 생각한다.
&lt;/p&gt;</content><author><name></name></author><category term="Book" /><category term="Reading" /><summary type="html">나는 책을 읽을 때 주로 속으로 글을 읽으면서 읽는다. 속발음이라고 하는 것 같은데 속도가 무척 느리다. 그러다보니 책 한 권을 다 읽는데 시간이 너무 오래 걸리고 흐름이 잘 끊겨서 스토리가 잘 생각이 안 나는 경우가 허다하다. 보통의 경우 속으로 소리내어 읽지 않고 눈으로만 읽는다고 하는데, 이를 묵독이라고 한다, 글쎄, 시도는 해 보았지만 잘 되지 않는다. 속독을 해 보려는 시도는 번번이 실패한다. 그래서 그냥 있는 그대로 자연스럽게 읽기로 했다. 대신 책을 다 읽고나면 후기를 꼭 남겨서 다시 한 번 되새겨 보는 걸로 책 읽는 방법에 대한 나의 오래된 고민을 해결하려 한다. 속도는 엄청 느리겠지만 적어도 안 읽는 것보단 나을거라 생각한다.</summary></entry><entry><title type="html">책 꾸뻬씨의 행복여행 독서 후기 두번째</title><link href="https://bradkwon.github.io/blog/2018/01/02/hector-book-review/" rel="alternate" type="text/html" title="책 꾸뻬씨의 행복여행 독서 후기 두번째" /><published>2018-01-02T00:00:00+01:00</published><updated>2018-01-02T00:00:00+01:00</updated><id>https://bradkwon.github.io/blog/2018/01/02/hector-book-review</id><content type="html" xml:base="https://bradkwon.github.io/blog/2018/01/02/hector-book-review/">&lt;blockquote&gt;
&lt;a href=&quot;/blog/2017/06/27/hector-book-review/&quot;&gt;이전 후기&lt;/a&gt;
&lt;/blockquote&gt;
&lt;p&gt;
이 책에 대한 예전 후기를 보고 지금과 달라진 부분들이 있어 기록을 남겨야겠다고 생각했다. 예전 글에서처럼 행복을 느낄 수 있는 다양한 방법에 최대한 노출되어야 한다는 생각은 지금도 같지만 그 강도나 빈도에 대해 생각하고 행복의 전제 조건에 대해 생각해보게 되었다.
&lt;/p&gt;
&lt;p&gt;
우선 예전 글을 읽다가 문득 든 생각은 불행이 없으면 행복도 없다는 생각이었다. 인간이 항상 행복하다면 그걸 행복이라고 인지할 수 있을까? 아마 아닐 것이다. 행복을 느낄 수 있는 것은 불행한 순간이 있었기 때문일 것이다. 아름다움도 추함이 있기에 알 수 있는 것일 거다. 악이 존재하기에 선이 구별되듯. 모두가 행복한 세상, 유토피아, 아마 실제로 그런 세상이 구현된다 할 지라도 불행을 겪었던 세대에게만 해당될 것이다. 유토피아에서 태어난 세대는 그게 유토피아인지조차 알 수 없을테니. 결국, 행복하려면 불행을 겪어야 한다는 말이 될 것이다. 행복과 불행 사이를 왔다갔다 해야 행복을 느낄 수 있고 더 행복할 수 있지 않을까 조심스레 생각을 해 본다. 아마 불행의 강도가 셌던 사람은 행복의 순간에 느끼게 되는 강도도 더 세지 않을까라는 생각도 조심스레 해본다. 그냥 불행의 순간을 존버하면서 행복의 순간이 왔을 때 만끽해야겠다.
&lt;/p&gt;
&lt;p&gt;
그리고 안타깝게도, 태양과 바다라는 행복을 찾아가려는 시도는 물거품이 되버리고 아이러니하게도 태양과 바다에서 더 멀어진 곳으로 오려고 하고 있다. 그 대신 또 다른 종류의 행복을 찾으려고 시도하고 있다. 나에게 주어진 상황에 대해 낙담하지 말고 그 시간에 다른 방법을 찾아보는 게 도움이 된다. 쓸데없는 감정소비를 하지 말아야겠다. 불행은 행복의 전제조건이다.
&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;/blog/img/20170627/hector-cover.jpg&quot; alt=&quot;Book Hector and the search for happiness cover&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="Book" /><category term="Review" /><summary type="html">이전 후기 이 책에 대한 예전 후기를 보고 지금과 달라진 부분들이 있어 기록을 남겨야겠다고 생각했다. 예전 글에서처럼 행복을 느낄 수 있는 다양한 방법에 최대한 노출되어야 한다는 생각은 지금도 같지만 그 강도나 빈도에 대해 생각하고 행복의 전제 조건에 대해 생각해보게 되었다. 우선 예전 글을 읽다가 문득 든 생각은 불행이 없으면 행복도 없다는 생각이었다. 인간이 항상 행복하다면 그걸 행복이라고 인지할 수 있을까? 아마 아닐 것이다. 행복을 느낄 수 있는 것은 불행한 순간이 있었기 때문일 것이다. 아름다움도 추함이 있기에 알 수 있는 것일 거다. 악이 존재하기에 선이 구별되듯. 모두가 행복한 세상, 유토피아, 아마 실제로 그런 세상이 구현된다 할 지라도 불행을 겪었던 세대에게만 해당될 것이다. 유토피아에서 태어난 세대는 그게 유토피아인지조차 알 수 없을테니. 결국, 행복하려면 불행을 겪어야 한다는 말이 될 것이다. 행복과 불행 사이를 왔다갔다 해야 행복을 느낄 수 있고 더 행복할 수 있지 않을까 조심스레 생각을 해 본다. 아마 불행의 강도가 셌던 사람은 행복의 순간에 느끼게 되는 강도도 더 세지 않을까라는 생각도 조심스레 해본다. 그냥 불행의 순간을 존버하면서 행복의 순간이 왔을 때 만끽해야겠다. 그리고 안타깝게도, 태양과 바다라는 행복을 찾아가려는 시도는 물거품이 되버리고 아이러니하게도 태양과 바다에서 더 멀어진 곳으로 오려고 하고 있다. 그 대신 또 다른 종류의 행복을 찾으려고 시도하고 있다. 나에게 주어진 상황에 대해 낙담하지 말고 그 시간에 다른 방법을 찾아보는 게 도움이 된다. 쓸데없는 감정소비를 하지 말아야겠다. 불행은 행복의 전제조건이다.</summary></entry><entry><title type="html">영화 Flipped 관람 후기</title><link href="https://bradkwon.github.io/blog/2018/01/02/flipped-movie-review/" rel="alternate" type="text/html" title="영화 Flipped 관람 후기" /><published>2018-01-02T00:00:00+01:00</published><updated>2018-01-02T00:00:00+01:00</updated><id>https://bradkwon.github.io/blog/2018/01/02/flipped-movie-review</id><content type="html" xml:base="https://bradkwon.github.io/blog/2018/01/02/flipped-movie-review/">&lt;p&gt;
영어공부 컨텐츠로 부분부분을 보다보니 전체 영화가 궁금해져서 보게되었다. 이미 큰 흐름은 알고 있었지만 끊겨있는 그 속의 내용들이 무척 궁금했다. 소년소녀의 눈으로 얘기하는 삶은 30대가 넘어선 나에게 내 아이들이 앞으로 살아갈 삶을 어떻게 함께 해 줘야할지 생각할 수 있는 기회를 주었다. 큰 줄기는 소년소녀의 아름다운 첫사랑 이야기이지만 그 과정에 극단적인 두 가족의 모습을 통해 메시지를 전하고 있다고 생각한다.
&lt;/p&gt;
&lt;p&gt;
소녀는 가난하지만 가족을 소중히 여기고 서로 존중해 주는 가정을 가지고 있고, 소년은 부유하지만 돈이 되지 않으면 쓸모없다고 생각하는 아빠를 둔 가정을 가지고 있다. 7살에 잘생긴 외모와 눈에 반했다가 성장하면서 점차 본질을 보는 시야를 가지게 되면서 소년에게서 멀어져가는 소녀와, 
자기를 좋다고 쫓아다니는 소녀에게서 멀어지려고 노력하다 이 소녀가 가진 내면의 아름다움에 점차 매료되어 자신도 그 내면에 동화되어 소녀를 좋아하게 되는 소년. 사실 소년은 잘 생겼지만 전형적인 가정에서 자라난 아직 속이 차지 않은 그냥 평범한 아이였고 소녀는 따뜻한 가정에서 자라나 가족의 지원을 듬뿍 받으며 삶에 대해 다른 아이들보다 빨리 알아가는 아이였다.
&lt;/p&gt;
&lt;p&gt;
이 두 소년소녀의 눈으로 극단적인 두 가정의 모습을 보여주지만 공통점은 모두 자기들이 사랑하는 것들을 지키려고 했다.
&lt;/p&gt;
&lt;p&gt;
소녀의 가정에는 엄마, 아빠, 두 오빠, 소녀가 있었는데 아빠는 자신의 가족과 발달장애자인 동생, 그리고 자신이 사랑하는 그림에 모든 가치를 두었고, 엄마는 자식들과 자신이 사랑하는 남편에 모든 가치를 두고 지키려 했다. 두 오빠는 자신들이 좋아하는 노래와 음악에 가치를 두었고, 소녀는 가족과 아빠가 말한 부분이 아닌 전체를 보는 방법을 알게 해 준 큰 무화과나무에 가치를 두었다.
&lt;/p&gt;
&lt;p&gt;
소년의 가정에는 엄마, 아빠, 외할아버지, 누나, 소년이 있었는데 아빠는 자신이 사랑하는 아내와 돈 때문에 좋아하던 음악을 포기하고 돈을 선택한 자신의 자존심에 가치를 두었고, 엄마는 가족에 가치를 두었고, 외할아버지는 이미 세상을 떠난 아내에 가치를 두었다. 누나는 비중이 크지 않고 알아낼 수 있는 부분이 없어서 모르겠고, 소년은 그냥 그저 그런 소년이었다.
&lt;/p&gt;
&lt;p&gt;
진실은 단순하고 지루하다고 들은 것 같다. 어떤 것들을 사랑하고 가치를 두어야 하는지에 대해 뻔한 진실을 어린 아이들의 성장기로 보여주는 아름다운 영화였다.
&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;/blog/img/20180102/flipped-poster.jpg&quot; alt=&quot;Movie Flipped poster&quot; /&gt;
&lt;/a&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;Flipped - 2010&lt;/span&gt;&lt;/p&gt;</content><author><name></name></author><category term="Movie" /><category term="Review" /><summary type="html">영어공부 컨텐츠로 부분부분을 보다보니 전체 영화가 궁금해져서 보게되었다. 이미 큰 흐름은 알고 있었지만 끊겨있는 그 속의 내용들이 무척 궁금했다. 소년소녀의 눈으로 얘기하는 삶은 30대가 넘어선 나에게 내 아이들이 앞으로 살아갈 삶을 어떻게 함께 해 줘야할지 생각할 수 있는 기회를 주었다. 큰 줄기는 소년소녀의 아름다운 첫사랑 이야기이지만 그 과정에 극단적인 두 가족의 모습을 통해 메시지를 전하고 있다고 생각한다. 소녀는 가난하지만 가족을 소중히 여기고 서로 존중해 주는 가정을 가지고 있고, 소년은 부유하지만 돈이 되지 않으면 쓸모없다고 생각하는 아빠를 둔 가정을 가지고 있다. 7살에 잘생긴 외모와 눈에 반했다가 성장하면서 점차 본질을 보는 시야를 가지게 되면서 소년에게서 멀어져가는 소녀와, 자기를 좋다고 쫓아다니는 소녀에게서 멀어지려고 노력하다 이 소녀가 가진 내면의 아름다움에 점차 매료되어 자신도 그 내면에 동화되어 소녀를 좋아하게 되는 소년. 사실 소년은 잘 생겼지만 전형적인 가정에서 자라난 아직 속이 차지 않은 그냥 평범한 아이였고 소녀는 따뜻한 가정에서 자라나 가족의 지원을 듬뿍 받으며 삶에 대해 다른 아이들보다 빨리 알아가는 아이였다. 이 두 소년소녀의 눈으로 극단적인 두 가정의 모습을 보여주지만 공통점은 모두 자기들이 사랑하는 것들을 지키려고 했다. 소녀의 가정에는 엄마, 아빠, 두 오빠, 소녀가 있었는데 아빠는 자신의 가족과 발달장애자인 동생, 그리고 자신이 사랑하는 그림에 모든 가치를 두었고, 엄마는 자식들과 자신이 사랑하는 남편에 모든 가치를 두고 지키려 했다. 두 오빠는 자신들이 좋아하는 노래와 음악에 가치를 두었고, 소녀는 가족과 아빠가 말한 부분이 아닌 전체를 보는 방법을 알게 해 준 큰 무화과나무에 가치를 두었다. 소년의 가정에는 엄마, 아빠, 외할아버지, 누나, 소년이 있었는데 아빠는 자신이 사랑하는 아내와 돈 때문에 좋아하던 음악을 포기하고 돈을 선택한 자신의 자존심에 가치를 두었고, 엄마는 가족에 가치를 두었고, 외할아버지는 이미 세상을 떠난 아내에 가치를 두었다. 누나는 비중이 크지 않고 알아낼 수 있는 부분이 없어서 모르겠고, 소년은 그냥 그저 그런 소년이었다. 진실은 단순하고 지루하다고 들은 것 같다. 어떤 것들을 사랑하고 가치를 두어야 하는지에 대해 뻔한 진실을 어린 아이들의 성장기로 보여주는 아름다운 영화였다. Flipped - 2010</summary></entry><entry><title type="html">책 누워서 읽는 알고리즘 독서 후기</title><link href="https://bradkwon.github.io/blog/2018/01/02/algorithm-book-review/" rel="alternate" type="text/html" title="책 누워서 읽는 알고리즘 독서 후기" /><published>2018-01-02T00:00:00+01:00</published><updated>2018-01-02T00:00:00+01:00</updated><id>https://bradkwon.github.io/blog/2018/01/02/algorithm-book-review</id><content type="html" xml:base="https://bradkwon.github.io/blog/2018/01/02/algorithm-book-review/">&lt;p&gt;
이러이러한 알고리즘이 있고 배경은 이렇다..까지만 이해할 수 있었다. 이 책을 읽으면서, 그리고 해외취업을 위해 외국 회사들에 기술 인터뷰를
보면서 느꼈던 건 절망감이었다. 그동안 나는 무얼 한걸까? 기술 인터뷰에서의 내 모습은 그냥 대학에 처음 들어와 첫번째 중간고사 시험을
치르는 학생의 모습이었다. 거기에 플러스로 경력을 보고 환대하던 인터뷰어들의 실망하는 표정들이란. 나에게는 자극이란 것이 없는지
당황스럽고 우울해지긴 하지만 뭔가 오기가 생기지는 않았다. 전혀 머리가 돌아가지가 않았다. 이런 문제들을 무사히 잘 헤쳐나가 일하고 있는
세상의 수 많은 개발자들은 그럼 도대체 얼마나 똑똑하단 말인가. 세상에 이렇게나 많은 똑똑한 사람들이 있을 줄은 몰랐다.
&lt;/p&gt;
&lt;p&gt;
세상은 개발자들에게 서로 의견을 공유하고 대화를 하라고 하는데 이런 똑똑한 사람들하고 대화를 할 만한 레벨이 내가 되는가? 그렇다고 그걸 단시간에 따라잡기 위해 잠을 줄여가며 열심히 공부할 내가 아니라 결국, 천천히 나 혼자 공부를 하게 된다. 사실 프로그래밍에 미쳐있는 것도 아니고 좋아하는 것도 아니니 그냥 내가 원하는대로 돈 적당히 잘 벌면서 오래 일할 수 있고 시간과 장소의 제약만 없었으면 좋겠다. 열심히 하지 말자. 난 열심히 할 수 있는 사람은 아니다. 그냥 꾸준히 할 뿐이다.
&lt;/p&gt;
&lt;p&gt;
언젠가 시간이 지나 내가 좀 더 아는게 많아진다면 그 때 다시 읽어봐야겠다.
&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;/blog/img/20180102/book-algorithm.jpg&quot; alt=&quot;누워서 읽는 알고리즘 책 표지&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="Book" /><category term="Review" /><summary type="html">이러이러한 알고리즘이 있고 배경은 이렇다..까지만 이해할 수 있었다. 이 책을 읽으면서, 그리고 해외취업을 위해 외국 회사들에 기술 인터뷰를 보면서 느꼈던 건 절망감이었다. 그동안 나는 무얼 한걸까? 기술 인터뷰에서의 내 모습은 그냥 대학에 처음 들어와 첫번째 중간고사 시험을 치르는 학생의 모습이었다. 거기에 플러스로 경력을 보고 환대하던 인터뷰어들의 실망하는 표정들이란. 나에게는 자극이란 것이 없는지 당황스럽고 우울해지긴 하지만 뭔가 오기가 생기지는 않았다. 전혀 머리가 돌아가지가 않았다. 이런 문제들을 무사히 잘 헤쳐나가 일하고 있는 세상의 수 많은 개발자들은 그럼 도대체 얼마나 똑똑하단 말인가. 세상에 이렇게나 많은 똑똑한 사람들이 있을 줄은 몰랐다. 세상은 개발자들에게 서로 의견을 공유하고 대화를 하라고 하는데 이런 똑똑한 사람들하고 대화를 할 만한 레벨이 내가 되는가? 그렇다고 그걸 단시간에 따라잡기 위해 잠을 줄여가며 열심히 공부할 내가 아니라 결국, 천천히 나 혼자 공부를 하게 된다. 사실 프로그래밍에 미쳐있는 것도 아니고 좋아하는 것도 아니니 그냥 내가 원하는대로 돈 적당히 잘 벌면서 오래 일할 수 있고 시간과 장소의 제약만 없었으면 좋겠다. 열심히 하지 말자. 난 열심히 할 수 있는 사람은 아니다. 그냥 꾸준히 할 뿐이다. 언젠가 시간이 지나 내가 좀 더 아는게 많아진다면 그 때 다시 읽어봐야겠다.</summary></entry><entry><title type="html">XAML in Xamarin</title><link href="https://bradkwon.github.io/tech/2017/12/10/xaml-in-xamarin/" rel="alternate" type="text/html" title="XAML in Xamarin" /><published>2017-12-10T00:00:00+01:00</published><updated>2017-12-10T00:00:00+01:00</updated><id>https://bradkwon.github.io/tech/2017/12/10/xaml-in-xamarin</id><content type="html" xml:base="https://bradkwon.github.io/tech/2017/12/10/xaml-in-xamarin/">&lt;blockquote&gt;
&lt;a href=&quot;/tech/2017/12/10/xaml-in-xamarin-kr/&quot;&gt;Korean Version&lt;/a&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;u&gt;&lt;small&gt;Please let me know if there is any incorrect information because this is what I summarized what I understood.&lt;/small&gt;&lt;/u&gt;
&lt;/p&gt;
&lt;p&gt;
What isi XAML? It is an acronym for eXtensible Application Markup Language and is used to seperate UI and functional codes. UI codes can be placed in the behind C# codes and can be controlled there, however that would cause difficulties to work on view designs and function implementations repectively because they are mixed up in one file. (of course, for dynamic generation of UI componenets helplessly should be implemented in this way)
&lt;/p&gt;
&lt;p&gt;
The key point of popular patterns or approaches thesedays in development such as MVC, MVVM and DI is to seperate each role or interest as a component and make it independent. After that, to mix and match those components to complete a product like machinary assembly. It went a bit far. By the way, due to the benefits we could get from modularization, I think UI and functions should also be seperated but it might depend on situations.
&lt;/p&gt;
&lt;p&gt;
XAML code and behind code can be mapped like this.
&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;/tech/img/20171210/2.png&quot; alt=&quot;Mapping between UI code and XAML code&quot; /&gt;
&lt;/a&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;Mapping between UI code and XAML code&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
XAML is used in WPF, Silverlight, UWP and Windows Workflow. Xamarin.Forms also uses the same grammar like others but it has unique grammars so it cannot be same like others. Here, I think just knowing XAML is used in those technologies is enough.
&lt;/p&gt;
&lt;p&gt;
Like HTML tags, each XAML tags can take event handlers.
&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;/tech/img/20171210/03.png&quot; alt=&quot;Add an TextChanged event handler in XAML code&quot; /&gt;
&lt;/a&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;Add an TextChanged event handler in XAML code&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
In Xamarin.Forms XAML, it supports Markup Extension for flexible settings of UI control attributes and for settings for respective mobile platforms, it provides the Device.OS property. Besides, it provides the reusable capsulation of components, which is called ContentView, so that it could be used in another UI like the user control feature in WinForms. When it comes to this feature, it would be better to check it out from &lt;a href=&quot;https://university.xamarin.com/welcome&quot; target=&quot;_blank&quot;&gt;Xamarin University&lt;/a&gt;
&lt;/p&gt;
&lt;blockquote&gt;&lt;h2 class=&quot;section-heading&quot;&gt;Happy Coding!&lt;/h2&gt;&lt;/blockquote&gt;</content><author><name></name></author><category term="Xamarin" /><category term="C#" /><category term="Mobile" /><summary type="html">Korean Version Please let me know if there is any incorrect information because this is what I summarized what I understood. What isi XAML? It is an acronym for eXtensible Application Markup Language and is used to seperate UI and functional codes. UI codes can be placed in the behind C# codes and can be controlled there, however that would cause difficulties to work on view designs and function implementations repectively because they are mixed up in one file. (of course, for dynamic generation of UI componenets helplessly should be implemented in this way) The key point of popular patterns or approaches thesedays in development such as MVC, MVVM and DI is to seperate each role or interest as a component and make it independent. After that, to mix and match those components to complete a product like machinary assembly. It went a bit far. By the way, due to the benefits we could get from modularization, I think UI and functions should also be seperated but it might depend on situations. XAML code and behind code can be mapped like this. Mapping between UI code and XAML code XAML is used in WPF, Silverlight, UWP and Windows Workflow. Xamarin.Forms also uses the same grammar like others but it has unique grammars so it cannot be same like others. Here, I think just knowing XAML is used in those technologies is enough. Like HTML tags, each XAML tags can take event handlers. Add an TextChanged event handler in XAML code In Xamarin.Forms XAML, it supports Markup Extension for flexible settings of UI control attributes and for settings for respective mobile platforms, it provides the Device.OS property. Besides, it provides the reusable capsulation of components, which is called ContentView, so that it could be used in another UI like the user control feature in WinForms. When it comes to this feature, it would be better to check it out from Xamarin University Happy Coding!</summary></entry><entry><title type="html">XAML in Xamarin (한글)</title><link href="https://bradkwon.github.io/tech/2017/12/10/xaml-in-xamarin-kr/" rel="alternate" type="text/html" title="XAML in Xamarin (한글)" /><published>2017-12-10T00:00:00+01:00</published><updated>2017-12-10T00:00:00+01:00</updated><id>https://bradkwon.github.io/tech/2017/12/10/xaml-in-xamarin-kr</id><content type="html" xml:base="https://bradkwon.github.io/tech/2017/12/10/xaml-in-xamarin-kr/">&lt;blockquote&gt;
&lt;a href=&quot;/tech/2017/12/10/xaml-in-xamarin/&quot;&gt;영문 버전&lt;/a&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;u&gt;&lt;small&gt;이 글은 저도 Xamarin 을 배우는 입장에서 공부한 내용을 정리해 놓은 글이기 때문에 혹시 틀린 내용이 있으면 지적해 주시면 감사하겠습니다.&lt;/small&gt;&lt;/u&gt;
&lt;/p&gt;
&lt;p&gt;
XAML 이란? eXtensible Application Markup Language 의 약자로 Xamarin.Forms 에서는 UI 와 동작을 분리하기 위해 사용되어진다. 화면에 보여지게 될 컨트롤들은 C# 코드단에서도 생성하고 화면에 추가가 가능하지만 이 C# 코드단에는 해당 컨트롤들의 동작을 나타내는 코드들 또한 표시되므로 UI 와 동작이 한 파일안에 존재하게 되어 화면 디자인과 동작 로직을 나눠 작업하기가 어려워진다는 단점이 있다. (물론 동적으로 컨트롤들을 다뤄야할 경우엔 이 경우로 할 수 밖에 없는 경우가 많기는 하다)
&lt;/p&gt;
&lt;p&gt;
현재 많이 사용되어지고 있는 MVC, MVVM, DI 등을 보면 핵심은 각각 역할 또는 관심별로 코드를 분리시켜 부품화하여 하나의 독립적인 부품을 만든 후 다른 부품들과 조립하여 하나의 제품을 만들어내는 일종의 기계 조립과정과도 비슷하다고 할 수 있을 것이다. 얘기가 조금 장황해졌지만 이로 인해 얻는 장점들이 많기 때문에 이렇게 분리를 하므로 UI 와 동작 역시 분리되는 게 맞다는 생각이 들지만 상황에 맞게 잘 쓰면 될 것 같다.
&lt;/p&gt;
&lt;p&gt;
우선, 아래 그림과 같이 UI 단 코드는 아래와 같이 매핑이 된다.
&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;/tech/img/20171210/2.png&quot; alt=&quot;UI 코드와 XAML 코드 매핑&quot; /&gt;
&lt;/a&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;UI 코드와 XAML 코드 매핑&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
XAML 은 WPF, 실버라이트, UWP, Windows Workflow 에서도 쓰이는데 Xamarin.Forms 에서 쓰이는 XAML 은 이들과 같은 문법을 쓰지만 고유의 문법이 존재하므로 같다고 볼 순 없다. 여기선 간단히 XAML 이 저런 데도 쓰이는 기술이다 까지만 알고 넘어가면 될 듯하다.
&lt;/p&gt;
&lt;p&gt;
HTML 태그와 마찬가지로 아래와 같이 각 컨트롤 태그에 Event Handler 를 설정해 줄 수 있다.
&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;/tech/img/20171210/03.png&quot; alt=&quot;XAML 코드에 이벤트 핸들러 추가&quot; /&gt;
&lt;/a&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;XAML 코드에 이벤트 핸들러 추가&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
Xamarin.Forms XAML 에서는 UI 컨트롤들의 값을 유연하게 설정할 수 있도록 Markup Extension 을 지원하고, 모바일 플랫폼별로 설정을 할 수 있도록 Device.OS 프로퍼티를 지원하며, 기존 Winforms 의 User Control 처럼 (ASP.Net MVC 의 경우 PartialView) 특정 UI 컨트롤들을 ContentView 라는 컴포넌트로 만들어 여러 화면에서 재사용 가능하도록 하는 기능도 지원한다. 여기에 대해서는 &lt;a href=&quot;https://university.xamarin.com/welcome&quot; target=&quot;_blank&quot;&gt;Xamarin University&lt;/a&gt; 를 통해 확인해 보는 것이 좋을 듯 하다.
&lt;/p&gt;
&lt;blockquote&gt;&lt;h2 class=&quot;section-heading&quot;&gt;Happy Coding!&lt;/h2&gt;&lt;/blockquote&gt;</content><author><name></name></author><category term="Xamarin" /><category term="C#" /><category term="Mobile" /><summary type="html">영문 버전 이 글은 저도 Xamarin 을 배우는 입장에서 공부한 내용을 정리해 놓은 글이기 때문에 혹시 틀린 내용이 있으면 지적해 주시면 감사하겠습니다. XAML 이란? eXtensible Application Markup Language 의 약자로 Xamarin.Forms 에서는 UI 와 동작을 분리하기 위해 사용되어진다. 화면에 보여지게 될 컨트롤들은 C# 코드단에서도 생성하고 화면에 추가가 가능하지만 이 C# 코드단에는 해당 컨트롤들의 동작을 나타내는 코드들 또한 표시되므로 UI 와 동작이 한 파일안에 존재하게 되어 화면 디자인과 동작 로직을 나눠 작업하기가 어려워진다는 단점이 있다. (물론 동적으로 컨트롤들을 다뤄야할 경우엔 이 경우로 할 수 밖에 없는 경우가 많기는 하다) 현재 많이 사용되어지고 있는 MVC, MVVM, DI 등을 보면 핵심은 각각 역할 또는 관심별로 코드를 분리시켜 부품화하여 하나의 독립적인 부품을 만든 후 다른 부품들과 조립하여 하나의 제품을 만들어내는 일종의 기계 조립과정과도 비슷하다고 할 수 있을 것이다. 얘기가 조금 장황해졌지만 이로 인해 얻는 장점들이 많기 때문에 이렇게 분리를 하므로 UI 와 동작 역시 분리되는 게 맞다는 생각이 들지만 상황에 맞게 잘 쓰면 될 것 같다. 우선, 아래 그림과 같이 UI 단 코드는 아래와 같이 매핑이 된다. UI 코드와 XAML 코드 매핑 XAML 은 WPF, 실버라이트, UWP, Windows Workflow 에서도 쓰이는데 Xamarin.Forms 에서 쓰이는 XAML 은 이들과 같은 문법을 쓰지만 고유의 문법이 존재하므로 같다고 볼 순 없다. 여기선 간단히 XAML 이 저런 데도 쓰이는 기술이다 까지만 알고 넘어가면 될 듯하다. HTML 태그와 마찬가지로 아래와 같이 각 컨트롤 태그에 Event Handler 를 설정해 줄 수 있다. XAML 코드에 이벤트 핸들러 추가 Xamarin.Forms XAML 에서는 UI 컨트롤들의 값을 유연하게 설정할 수 있도록 Markup Extension 을 지원하고, 모바일 플랫폼별로 설정을 할 수 있도록 Device.OS 프로퍼티를 지원하며, 기존 Winforms 의 User Control 처럼 (ASP.Net MVC 의 경우 PartialView) 특정 UI 컨트롤들을 ContentView 라는 컴포넌트로 만들어 여러 화면에서 재사용 가능하도록 하는 기능도 지원한다. 여기에 대해서는 Xamarin University 를 통해 확인해 보는 것이 좋을 듯 하다. Happy Coding!</summary></entry><entry><title type="html">Introduction to Xamarin.Forms</title><link href="https://bradkwon.github.io/tech/2017/12/04/xamarin-forms-intro/" rel="alternate" type="text/html" title="Introduction to Xamarin.Forms" /><published>2017-12-04T00:00:00+01:00</published><updated>2017-12-04T00:00:00+01:00</updated><id>https://bradkwon.github.io/tech/2017/12/04/xamarin-forms-intro</id><content type="html" xml:base="https://bradkwon.github.io/tech/2017/12/04/xamarin-forms-intro/">&lt;blockquote&gt;
&lt;a href=&quot;/tech/2017/12/04/xamarin-forms-intro-kr/&quot;&gt;Korean Version&lt;/a&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;u&gt;&lt;small&gt;Please let me know if there is any incorrect information because this is what I summarized what I understood.&lt;/small&gt;&lt;/u&gt;
&lt;/p&gt;
&lt;p&gt;
Xamarin.Forms enables for users to reuse commonly used UI components as well as business logics that are possible by the &lt;a href=&quot;/tech/2017/12/01/xamarin-code-sharing/&quot; target=&quot;_blank&quot;&gt;code sharing&lt;/a&gt; feature that I dealt with before. For instance, components such as Page, Layout, Inputbox, Button and Label can be used in all platforms thus, we can write only one UI components generation code and then apply to all platforms through Xamarin.Forms.
&lt;/p&gt;
&lt;p&gt;
You can see the list of available components in Xamarin.Forms through this &lt;a href=&quot;https://developer.xamarin.com/guides/xamarin-forms/user-interface/controls/views/&quot; target=&quot;_blank&quot;&gt;link&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
If you take a look at how the code matches UI with below, you will notice that you can implement same components and functions on all platforms once you write the code once.
&lt;/p&gt;
&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainPage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContentPage&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phoneNumberText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;translateButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;translatedNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MainPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Set padding in the page.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Padding&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Thickness&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Create a layout component for the page with the spacing setup.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;StackLayout&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;panel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StackLayout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Spacing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Add a label&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;panel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Label&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Enter a Phoneword:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;FontSize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetNamedSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NamedSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Large&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Add a textbox for input&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;panel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phoneNumberText&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1-855-XAMARIN&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Add the translate button&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;panel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;translateButton&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Translate&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Add the call button&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;panel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callButton&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Call&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;IsEnabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Add a click event hander on the translate button&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;translateButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Clicked&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enteredNumber&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phoneNumberText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;translatedNumber&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PhonewordTranslator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enteredNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsNullOrWhiteSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;translatedNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;callButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsEnabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;callButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Call &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;translatedNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;callButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsEnabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;callButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Call&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Set the layout component to the page.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;panel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;/tech/img/20171204/1.png&quot; alt=&quot;UI views on each mobile platform&quot; /&gt;
&lt;/a&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;UI views on each mobile platform&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
If we look into how this works under the hood, button classes created and bound click event handlers in C# code is transformed to each language for each playform at compile tiem. If you want to see what do the code or files transformed to each platform look like, please do research on it by yourself because I am quite...lazy and am not curious... but it would be great to understand the inside of Xamarin for sure :)
&lt;/p&gt;
&lt;p&gt;
Then how we can implement functions that are platform-specific? Xamarin provides several approach to resolve this such as DependencyService or applying the dependency injection (DI) pattern with super classes like interfaces or abstract classes and then each platform inject their methods into it. In this writing, we are just catching a glimpse in order to understand Xamarin concept (I don't know well either..), so I recommend you watch lectures in the &lt;a href=&quot;https://university.xamarin.com/welcome&quot; target=&quot;_blank&quot;&gt;Xamarin University&lt;/a&gt;.
&lt;/p&gt;
&lt;blockquote&gt;&lt;h2 class=&quot;section-heading&quot;&gt;Happy Coding!&lt;/h2&gt;&lt;/blockquote&gt;</content><author><name></name></author><category term="Xamarin" /><category term="C#" /><category term="Mobile" /><summary type="html">Korean Version Please let me know if there is any incorrect information because this is what I summarized what I understood. Xamarin.Forms enables for users to reuse commonly used UI components as well as business logics that are possible by the code sharing feature that I dealt with before. For instance, components such as Page, Layout, Inputbox, Button and Label can be used in all platforms thus, we can write only one UI components generation code and then apply to all platforms through Xamarin.Forms. You can see the list of available components in Xamarin.Forms through this link. If you take a look at how the code matches UI with below, you will notice that you can implement same components and functions on all platforms once you write the code once. ```csharp public class MainPage : ContentPage { Entry phoneNumberText; Button translateButton; Button callButton; string translatedNumber;</summary></entry><entry><title type="html">Xamarin.Forms 소개</title><link href="https://bradkwon.github.io/tech/2017/12/04/xamarin-forms-intro-kr/" rel="alternate" type="text/html" title="Xamarin.Forms 소개" /><published>2017-12-04T00:00:00+01:00</published><updated>2017-12-04T00:00:00+01:00</updated><id>https://bradkwon.github.io/tech/2017/12/04/xamarin-forms-intro-kr</id><content type="html" xml:base="https://bradkwon.github.io/tech/2017/12/04/xamarin-forms-intro-kr/">&lt;blockquote&gt;
&lt;a href=&quot;/tech/2017/12/04/xamarin-forms-intro/&quot;&gt;영문 버전&lt;/a&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;u&gt;&lt;small&gt;이 글은 저도 Xamarin 을 배우는 입장에서 공부한 내용을 정리해 놓은 글이기 때문에 혹시 틀린 내용이 있으면 지적해 주시면 감사하겠습니다.&lt;/small&gt;&lt;/u&gt;
&lt;/p&gt;
&lt;p&gt;
Xamarin.Forms 는 이전 장인 &lt;a href=&quot;/tech/2017/12/01/xamarin-code-sharing-kr/&quot; target=&quot;_blank&quot;&gt;Code Sharing&lt;/a&gt; 으로 가능했던 비즈니스 로직 재사용 방법처럼 공통적으로 쓰이는 UI 컴포넌트들을 재사용할 수 있게 해준다. 예를 들면, 페이지, 레이아웃, 입력 상자, 버튼 그리고 라벨과 같은 컴포넌트들은 모든 플랫폼에서 공통적으로 사용할 수 있기 때문에 이를 Xamarin.Forms 에서 모든 플랫폼에 동일하게 생성하여 개발 및 관리를 쉽게 해준다. 
&lt;/p&gt;
&lt;p&gt;
Xamarin.Forms 에서 사용가능한 컴포넌트 리스트는 &lt;a href=&quot;https://developer.xamarin.com/guides/xamarin-forms/user-interface/controls/views/&quot; target=&quot;_blank&quot;&gt;이 링크&lt;/a&gt;를 통해 확인 가능하다.
&lt;/p&gt;
&lt;p&gt;
코드와 화면으로 어떻게 구현이 되는지 한 번 확인해 보면 다음과 같은 하나의 코드로 안드로이드, 아이폰, 윈도우폰에 동일한 컴포넌트, 기능을 구현할 수 있다.
&lt;/p&gt;
&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainPage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContentPage&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phoneNumberText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;translateButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;translatedNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MainPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Set padding in the page.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Padding&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Thickness&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Create a layout component for the page with the spacing setup.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;StackLayout&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;panel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StackLayout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Spacing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Add a label&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;panel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Label&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Enter a Phoneword:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;FontSize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetNamedSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NamedSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Large&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Add a textbox for input&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;panel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phoneNumberText&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1-855-XAMARIN&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Add the translate button&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;panel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;translateButton&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Translate&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Add the call button&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;panel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callButton&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Call&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;IsEnabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Add a click event hander on the translate button&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;translateButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Clicked&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enteredNumber&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phoneNumberText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;translatedNumber&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PhonewordTranslator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enteredNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsNullOrWhiteSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;translatedNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;callButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsEnabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;callButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Call &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;translatedNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;callButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsEnabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;callButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Call&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Set the layout component to the page.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;panel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;/tech/img/20171204/1.png&quot; alt=&quot;각각 모바일 플랫폼별 화면&quot; /&gt;
&lt;/a&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;각각 모바일 플랫폼별 화면&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
내부 동작 방식을 보면 버튼을 예로 들었을 때, 위의 코드에서와 같이 Button 클래스를 생성하고 click event handler 를 C# 으로 작성해서 컴파일을 하면 Xamarin 이 각각 플랫폼에 맞게 이를 변환한다고 보면 된다. 각각 플랫폼의 언어로 컴파일이 되었는지는 저는 궁금하지 않아서 보진 않았지만 궁금하신 분들은 한 번 찾아서 보면 좋을 것 같다.
&lt;/p&gt;
&lt;p&gt;
그러면 공통적으로 사용할 수 없는 플랫폼 의존적인 기능들은 어떻게 구현할까? 이는 Xamarin 에서 제공하는 DependencyService 등이나 인터페이스나 추상 클래스를 사용하여 상위 클래스를 만든 후 Dependency Injection (DI) 패턴을 적용하여 각각의 플랫폼에서 자기 코드를 넘겨서 처리하는 방법이 있다. 여기선 Xamarin.Forms 가 어떤건지 개념을 잡기 위해 훑어만 보는 수준이므로 (나도 아직 잘 모름..) 실제 적용방법은 &lt;a href=&quot;https://university.xamarin.com/welcome&quot; target=&quot;_blank&quot;&gt;Xamarin University&lt;/a&gt; 등에서 각자 알아서 찾아보기로…
&lt;/p&gt;
&lt;blockquote&gt;&lt;h2 class=&quot;section-heading&quot;&gt;Happy Coding!&lt;/h2&gt;&lt;/blockquote&gt;</content><author><name></name></author><category term="Xamarin" /><category term="C#" /><category term="Mobile" /><summary type="html">영문 버전 이 글은 저도 Xamarin 을 배우는 입장에서 공부한 내용을 정리해 놓은 글이기 때문에 혹시 틀린 내용이 있으면 지적해 주시면 감사하겠습니다. Xamarin.Forms 는 이전 장인 Code Sharing 으로 가능했던 비즈니스 로직 재사용 방법처럼 공통적으로 쓰이는 UI 컴포넌트들을 재사용할 수 있게 해준다. 예를 들면, 페이지, 레이아웃, 입력 상자, 버튼 그리고 라벨과 같은 컴포넌트들은 모든 플랫폼에서 공통적으로 사용할 수 있기 때문에 이를 Xamarin.Forms 에서 모든 플랫폼에 동일하게 생성하여 개발 및 관리를 쉽게 해준다. Xamarin.Forms 에서 사용가능한 컴포넌트 리스트는 이 링크를 통해 확인 가능하다. 코드와 화면으로 어떻게 구현이 되는지 한 번 확인해 보면 다음과 같은 하나의 코드로 안드로이드, 아이폰, 윈도우폰에 동일한 컴포넌트, 기능을 구현할 수 있다. ```csharp public class MainPage : ContentPage { Entry phoneNumberText; Button translateButton; Button callButton; string translatedNumber;</summary></entry><entry><title type="html">Xamarin Code Sharing</title><link href="https://bradkwon.github.io/tech/2017/12/01/xamarin-code-sharing/" rel="alternate" type="text/html" title="Xamarin Code Sharing" /><published>2017-12-01T00:00:00+01:00</published><updated>2017-12-01T00:00:00+01:00</updated><id>https://bradkwon.github.io/tech/2017/12/01/xamarin-code-sharing</id><content type="html" xml:base="https://bradkwon.github.io/tech/2017/12/01/xamarin-code-sharing/">&lt;blockquote&gt;
&lt;a href=&quot;/tech/2017/12/01/xamarin-code-sharing-kr/&quot;&gt;Korean Version&lt;/a&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;u&gt;&lt;small&gt;
Please let me know if there is any incorrect information because this is what I summarized what I understood.
&lt;/small&gt;&lt;/u&gt;
&lt;/p&gt;
&lt;p&gt;
The aim of Xamain is to write a function once, run on every platform. However, it seems impossible pragmatically.
Therefore, this code sharing approach came out to reuse common code except for platform-specific code.
There are two ways in this approach. One is shared projects and the other is shared compiled binaries.
&lt;/p&gt;
&lt;p&gt;
I quoted the part which explains the reason why you use or consider Xamarin from the lecture in Xamarin University.
&lt;/p&gt;
&lt;blockquote&gt;
One of the reasons you are probably either using or evaluating Xamarin is because it allows you to write your core logic 
once in a familiar .NET language and then share it across all the popular mobile platforms. This means we fix bugs once, 
implement new features once and reduce our maintenance and testable surfaces because we have less code to maintain
&lt;/blockquote&gt;
&lt;p&gt;
I think it would be better to watch lectures in &lt;a href=&quot;https://university.xamarin.com/welcome&quot; target=&quot;_blank&quot;&gt;Xamarin University&lt;/a&gt; and build up exercise projects in them so I am going to sum up basic concepts here.
&lt;/p&gt;
&lt;p&gt;
Shared projects is to create an additional project in the solution and, in turn, to have other mobile platform projects, such as android, iOS, windows phone and universal windows app (UWP), refer to it. In the conventional way, this kind of project can be compied as binary file and being refered to other projects in the form of DLL, however this shared project is included to other mobile platform projects in the form of code and compiled together at compile time like partial feature in C#. The include feature in web development.
I captured the picture that depicts well of this concept.
&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;/tech/img/20171201/3.png&quot; alt=&quot;Concept of shared projects&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
Shared compiled binaries is to refer as a DLL like the conventional way.
There are also two approaches. One is to create portable class library (PCL) project and refer it.
In order to run on multiple platforms, you have to configure which platform are you going to run in the profile of this PCL project.
For example, such as .Net Framework 4.5, Windows Universal 10.0, Windows Phone 8.1, Xamarin.Android, Xamarin.iOS, Xamarin.iOS (Classic).
&lt;/p&gt;
&lt;p&gt;
The other is to create .Net Standard Library project and refer it.
This is the .Net API library that can be commonly used in every .Net platform and it has rolled out up to version 2.0 from initial version 1.0. The lower version you choose, the less APIs you can use. You can choose which version you want to set in the project property.
&lt;/p&gt;
&lt;p&gt;
As these two approaches hasa pros and cons respectively, you can choose either one that fits on your development environment.
Xamarin University recommends to use shared projects if the size of your dev team is small and should be in the same solution with other projects and to use shared compiled binaries if the size of dev team is big or should be controlled in the form of component.

I brought the summaries of each approach's pros and cons below.
&lt;/p&gt;
&lt;p&gt;
    &lt;span&gt;&lt;b&gt;Shared Projects&lt;/b&gt;&lt;/span&gt;
    &lt;table class=&quot;table table-bordered table-condensed&quot;&gt;
    &lt;thead&gt;
        &lt;th width=&quot;50%&quot; style=&quot;text-align:center;&quot;&gt;Pros&lt;/th&gt;
        &lt;th width=&quot;50%&quot; style=&quot;text-align:center;&quot;&gt;Cons&lt;/th&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
    &lt;tr&gt;
        &lt;td&gt;All APIs available&lt;/td&gt;
        &lt;td&gt;Can lead to spaghetti code&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Platform-specific logic can be added directly&lt;/td&gt;
        &lt;td&gt;Difficult to unit test conditional code&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;All file types can be shared&lt;/td&gt;
        &lt;td&gt;Must be shipped in source form&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Smaller package sizes/platform-specific optimizations&lt;/td&gt;
        &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/p&gt;
&lt;p&gt;
    &lt;span&gt;&lt;b&gt;Shared Compiled Binaries&lt;/b&gt;&lt;/span&gt;
    &lt;table class=&quot;table table-bordered table-condensed&quot;&gt;
    &lt;thead&gt;
        &lt;th width=&quot;50%&quot; style=&quot;text-align:center;&quot;&gt;Pros&lt;/th&gt;
        &lt;th width=&quot;50%&quot; style=&quot;text-align:center;&quot;&gt;Cons&lt;/th&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
    &lt;tr&gt;
        &lt;td&gt;Enforces architectural design&lt;/td&gt;
        &lt;td&gt;Limited APIs available&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Can be unit tested separately&lt;/td&gt;
        &lt;td&gt;Difficult to share non-code files&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Can be shipped in binary form (NuGet)&lt;/td&gt;
        &lt;td&gt;Limited to target platforms or APIs&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;/td&gt;
        &lt;td&gt;Requires more work to integrate platform-specific code&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/p&gt;
&lt;blockquote&gt;&lt;h2 class=&quot;section-heading&quot;&gt;Happy Coding!&lt;/h2&gt;&lt;/blockquote&gt;</content><author><name></name></author><category term="Xamarin" /><category term="C#" /><category term="Mobile" /><summary type="html">Korean Version Please let me know if there is any incorrect information because this is what I summarized what I understood. The aim of Xamain is to write a function once, run on every platform. However, it seems impossible pragmatically. Therefore, this code sharing approach came out to reuse common code except for platform-specific code. There are two ways in this approach. One is shared projects and the other is shared compiled binaries. I quoted the part which explains the reason why you use or consider Xamarin from the lecture in Xamarin University. One of the reasons you are probably either using or evaluating Xamarin is because it allows you to write your core logic once in a familiar .NET language and then share it across all the popular mobile platforms. This means we fix bugs once, implement new features once and reduce our maintenance and testable surfaces because we have less code to maintain I think it would be better to watch lectures in Xamarin University and build up exercise projects in them so I am going to sum up basic concepts here. Shared projects is to create an additional project in the solution and, in turn, to have other mobile platform projects, such as android, iOS, windows phone and universal windows app (UWP), refer to it. In the conventional way, this kind of project can be compied as binary file and being refered to other projects in the form of DLL, however this shared project is included to other mobile platform projects in the form of code and compiled together at compile time like partial feature in C#. The include feature in web development. I captured the picture that depicts well of this concept. Shared compiled binaries is to refer as a DLL like the conventional way. There are also two approaches. One is to create portable class library (PCL) project and refer it. In order to run on multiple platforms, you have to configure which platform are you going to run in the profile of this PCL project. For example, such as .Net Framework 4.5, Windows Universal 10.0, Windows Phone 8.1, Xamarin.Android, Xamarin.iOS, Xamarin.iOS (Classic). The other is to create .Net Standard Library project and refer it. This is the .Net API library that can be commonly used in every .Net platform and it has rolled out up to version 2.0 from initial version 1.0. The lower version you choose, the less APIs you can use. You can choose which version you want to set in the project property. As these two approaches hasa pros and cons respectively, you can choose either one that fits on your development environment. Xamarin University recommends to use shared projects if the size of your dev team is small and should be in the same solution with other projects and to use shared compiled binaries if the size of dev team is big or should be controlled in the form of component.</summary></entry><entry><title type="html">Xamarin 코드 공유</title><link href="https://bradkwon.github.io/tech/2017/12/01/xamarin-code-sharing-kr/" rel="alternate" type="text/html" title="Xamarin 코드 공유" /><published>2017-12-01T00:00:00+01:00</published><updated>2017-12-01T00:00:00+01:00</updated><id>https://bradkwon.github.io/tech/2017/12/01/xamarin-code-sharing-kr</id><content type="html" xml:base="https://bradkwon.github.io/tech/2017/12/01/xamarin-code-sharing-kr/">&lt;blockquote&gt;
&lt;a href=&quot;/tech/2017/12/01/xamarin-code-sharing/&quot;&gt;영문 버전&lt;/a&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;u&gt;&lt;small&gt;이 글은 저도 Xamarin 을 배우는 입장에서 공부한 내용을 정리해 놓은 글이기 때문에 혹시 틀린 내용이 있으면 지적해 주시면 감사하겠습니다.&lt;/small&gt;&lt;/u&gt;
&lt;/p&gt;
&lt;p&gt;
Xamarin 이 지향하는 게 동일한 기능을 안드로이드, 아이폰, 윈도우폰과 같은 각각의 플랫폼에 맞게 다시 작성하는 게 아닌 
한 번 작성된 코드로 위 세 플랫폼 모두에서 동작할 수 있도록 하는 것이지만 현실적으로는 이게 불가능하다. 
그래서 나오게 된 솔루션이 플랫폼 제한적인 코드를 제외한 공통적인 코드들을 재사용하기 위한 방법으로 나온 Code Sharing 방식이다. 
여기에는 크게 두 가지 방식이 있는데 첫째는 Shared Projects 이고 다른 하나는 Shared Compiled Binaries 이다. 
&lt;/p&gt;
&lt;p&gt;
Xamarin University 강의 중 Xamarin 을 사용하는 이유에 대한 설명이 있어 옮겨와 번역을 해 보았다.
&lt;/p&gt;
&lt;blockquote&gt;
One of the reasons you are probably either using or evaluating Xamarin is because it allows you to write your core logic 
once in a familiar .NET language and then share it across all the popular mobile platforms. This means we fix bugs once, 
implement new features once and reduce our maintenance and testable surfaces because we have less code to maintain
&lt;/blockquote&gt;
&lt;blockquote&gt;
아마 당신이 Xamarin 을 사용하거나 고려하고 있는 이유들 중 하나는 핵심 로직을 익숙한 .Net 언어로 한 번만 작성한 뒤 주요 모바일 플랫폼들에서 
사용할 수 있다는 것일 것이다. 이 말은 버그를 한 번만 고치면 되고, 새로운 기능을 한 번만 만들면 되므로 적은 양의 코드를 가지게 되어 유지보수 
및 테스트할 부분이 줄어든다는 것이다.
&lt;/blockquote&gt;
&lt;p&gt;
구체적인 구현 방법은 &lt;a href=&quot;https://university.xamarin.com/welcome&quot; target=&quot;_blank&quot;&gt;Xamarin University&lt;/a&gt;에 가면 
따라해 볼 수 있는 강의가 있으니 직접 강의를 보고 구현해 보는게 좋을 듯 하여 여기서는 간단히 개념만 정리해 보려고 한다.
&lt;/p&gt;
&lt;p&gt;
Shared Projects 방식은, 별도의 Shared Project 를 하나 만들어서 안드로이드나 아이폰, 그리고 윈도우폰과 Universal Windows App(UWP) 
프로젝트들에 프로젝트 참조하여 사용하는 방식이다. 보통은 이렇게 별도의 프로젝트를 만들어서 다른 프로젝트에 참조를 하게 되면 이미 컴파일된 
바이너리 파일인 DLL 라이브러리로 참조가 되어 사용할 수 있는데 반해, 이 Shared Project 는 C# 의 Partial 기능처럼 컴파일 시점에 각각의 
참조된 플랫폼 프로젝트에 Shared Project 소스가 포함되서 컴파일이 된다는 점이다. 웹으로 치면 Include 와 동일하다. 
간단한 그림을 강의에서 캡쳐해서 나타내 보았다.
&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;/tech/img/20171201/3.png&quot; alt=&quot;Shared 프로젝트 개념&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
Shared Compiled Binaries 방식은, 기존 방식처럼 별도의 라이브러리 프로젝트를 DLL 로 참조하는 것이다. 
여기에는 두 가지 방법이 있는데 첫째는, Portable Class Library (PCL) 프로젝트를 만들어 바이너리로 참조하게 하는 것이다. 
각각 플랫폼들에서 공통적으로 실행되기 때문에 실행될 플랫폼들의 프로파일을 설정해 줘야 한다. 
예를 들면, .Net Framework 4.5, Windows Universal 10.0, Windows Phone 8.1, Xamarin.Android, Xamarin.iOS, Xamarin.iOS (Classic) 과 
같은 것들을 말이다.
&lt;/p&gt;
&lt;p&gt;
두번째는, .Net Standard Library 프로젝트를 만들어 바이너리로 참조하게 하는 것이다. 이건 모든 닷넷 플랫폼에서 공통적으로 사용할 수 있는 .Net API 라이브러리인데 1.0, 1.1, 1.2 … 현재 2.0 까지 버전이 나왔고 버전이 낮아질수록 사용할 수 있는 API 가 적어진다. 프로젝트 속성에서 버전을 선택할 수 있다. 
&lt;/p&gt;
&lt;p&gt;
두 가지 방식 모두 장단점이 있기 때문에 개발환경에 맞게 선택해서 사용하면 되며, Shared Projects 방식은 같은 솔루션에 포함되어야 하기에 작은 규모의 앱이나 개발팀에 적합하며, 규모가 크거나 컴포넌트 형식으로 관리되어야 한다면 Shared Compiled Libraries 방식이 적합할 것이다.

역시 Xamarin University 강의에 각각 방식의 장단점을 정리해 놓은게 있어 옮겨와 번역을 해 보았다.
&lt;/p&gt;
&lt;p&gt;
    &lt;span&gt;&lt;b&gt;Shared Projects&lt;/b&gt;&lt;/span&gt;
    &lt;table class=&quot;table table-bordered table-condensed&quot;&gt;
    &lt;thead&gt;
        &lt;th width=&quot;50%&quot; style=&quot;text-align:center;&quot;&gt;Pros&lt;/th&gt;
        &lt;th width=&quot;50%&quot; style=&quot;text-align:center;&quot;&gt;Cons&lt;/th&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
    &lt;tr&gt;
        &lt;td&gt;모든 API 사용가능&lt;/td&gt;
        &lt;td&gt;스파게티 소스가 될 가능성&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;플랫폼 제한적인 로직 직접 추가 가능&lt;/td&gt;
        &lt;td&gt;플랫폼 제한적인 로직 유닛 테스팅 어려움&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;모든 파일 종류 공유 가능&lt;/td&gt;
        &lt;td&gt;반드시 소스 형식으로 제공되어야 함&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;작은 패키지 크기/플랫폼별 최적화&lt;/td&gt;
        &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/p&gt;
&lt;p&gt;
    &lt;span&gt;&lt;b&gt;Shared Compiled Binaries&lt;/b&gt;&lt;/span&gt;
    &lt;table class=&quot;table table-bordered table-condensed&quot;&gt;
    &lt;thead&gt;
        &lt;th width=&quot;50%&quot; style=&quot;text-align:center;&quot;&gt;Pros&lt;/th&gt;
        &lt;th width=&quot;50%&quot; style=&quot;text-align:center;&quot;&gt;Cons&lt;/th&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
    &lt;tr&gt;
        &lt;td&gt;구조적 디자인 강제&lt;/td&gt;
        &lt;td&gt;제한적인 API&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;독립적으로 유닛 테스팅 가능&lt;/td&gt;
        &lt;td&gt;코드성 파일외 공유의 어려움&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;바이너리 형식으로 배포 가능 (NuGet)&lt;/td&gt;
        &lt;td&gt;제한된 타겟 플랫폼 또는 API&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;/td&gt;
        &lt;td&gt;플랫폼 제한적인 코드 통합에 추가 작업 필요&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/p&gt;
&lt;blockquote&gt;&lt;h2 class=&quot;section-heading&quot;&gt;Happy Coding!&lt;/h2&gt;&lt;/blockquote&gt;</content><author><name></name></author><category term="Xamarin" /><category term="C#" /><category term="Mobile" /><summary type="html">영문 버전 이 글은 저도 Xamarin 을 배우는 입장에서 공부한 내용을 정리해 놓은 글이기 때문에 혹시 틀린 내용이 있으면 지적해 주시면 감사하겠습니다. Xamarin 이 지향하는 게 동일한 기능을 안드로이드, 아이폰, 윈도우폰과 같은 각각의 플랫폼에 맞게 다시 작성하는 게 아닌 한 번 작성된 코드로 위 세 플랫폼 모두에서 동작할 수 있도록 하는 것이지만 현실적으로는 이게 불가능하다. 그래서 나오게 된 솔루션이 플랫폼 제한적인 코드를 제외한 공통적인 코드들을 재사용하기 위한 방법으로 나온 Code Sharing 방식이다. 여기에는 크게 두 가지 방식이 있는데 첫째는 Shared Projects 이고 다른 하나는 Shared Compiled Binaries 이다. Xamarin University 강의 중 Xamarin 을 사용하는 이유에 대한 설명이 있어 옮겨와 번역을 해 보았다. One of the reasons you are probably either using or evaluating Xamarin is because it allows you to write your core logic once in a familiar .NET language and then share it across all the popular mobile platforms. This means we fix bugs once, implement new features once and reduce our maintenance and testable surfaces because we have less code to maintain 아마 당신이 Xamarin 을 사용하거나 고려하고 있는 이유들 중 하나는 핵심 로직을 익숙한 .Net 언어로 한 번만 작성한 뒤 주요 모바일 플랫폼들에서 사용할 수 있다는 것일 것이다. 이 말은 버그를 한 번만 고치면 되고, 새로운 기능을 한 번만 만들면 되므로 적은 양의 코드를 가지게 되어 유지보수 및 테스트할 부분이 줄어든다는 것이다. 구체적인 구현 방법은 Xamarin University에 가면 따라해 볼 수 있는 강의가 있으니 직접 강의를 보고 구현해 보는게 좋을 듯 하여 여기서는 간단히 개념만 정리해 보려고 한다. Shared Projects 방식은, 별도의 Shared Project 를 하나 만들어서 안드로이드나 아이폰, 그리고 윈도우폰과 Universal Windows App(UWP) 프로젝트들에 프로젝트 참조하여 사용하는 방식이다. 보통은 이렇게 별도의 프로젝트를 만들어서 다른 프로젝트에 참조를 하게 되면 이미 컴파일된 바이너리 파일인 DLL 라이브러리로 참조가 되어 사용할 수 있는데 반해, 이 Shared Project 는 C# 의 Partial 기능처럼 컴파일 시점에 각각의 참조된 플랫폼 프로젝트에 Shared Project 소스가 포함되서 컴파일이 된다는 점이다. 웹으로 치면 Include 와 동일하다. 간단한 그림을 강의에서 캡쳐해서 나타내 보았다. Shared Compiled Binaries 방식은, 기존 방식처럼 별도의 라이브러리 프로젝트를 DLL 로 참조하는 것이다. 여기에는 두 가지 방법이 있는데 첫째는, Portable Class Library (PCL) 프로젝트를 만들어 바이너리로 참조하게 하는 것이다. 각각 플랫폼들에서 공통적으로 실행되기 때문에 실행될 플랫폼들의 프로파일을 설정해 줘야 한다. 예를 들면, .Net Framework 4.5, Windows Universal 10.0, Windows Phone 8.1, Xamarin.Android, Xamarin.iOS, Xamarin.iOS (Classic) 과 같은 것들을 말이다. 두번째는, .Net Standard Library 프로젝트를 만들어 바이너리로 참조하게 하는 것이다. 이건 모든 닷넷 플랫폼에서 공통적으로 사용할 수 있는 .Net API 라이브러리인데 1.0, 1.1, 1.2 … 현재 2.0 까지 버전이 나왔고 버전이 낮아질수록 사용할 수 있는 API 가 적어진다. 프로젝트 속성에서 버전을 선택할 수 있다. 두 가지 방식 모두 장단점이 있기 때문에 개발환경에 맞게 선택해서 사용하면 되며, Shared Projects 방식은 같은 솔루션에 포함되어야 하기에 작은 규모의 앱이나 개발팀에 적합하며, 규모가 크거나 컴포넌트 형식으로 관리되어야 한다면 Shared Compiled Libraries 방식이 적합할 것이다.</summary></entry></feed>