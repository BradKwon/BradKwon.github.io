<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-09-25T22:48:10+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Brad Kwon</title><subtitle>Brad Kwon's personal website. The introduction, the portfolio and blogs about programming and life of Brad Hyeongu Kwon.</subtitle><entry><title type="html">Singleton pattern VS Static class in C#</title><link href="http://localhost:4000/tech/2019/03/07/singleton-vs-static/" rel="alternate" type="text/html" title="Singleton pattern VS Static class in C#" /><published>2019-03-07T00:00:00+01:00</published><updated>2019-03-07T00:00:00+01:00</updated><id>http://localhost:4000/tech/2019/03/07/singleton-vs-static</id><content type="html" xml:base="http://localhost:4000/tech/2019/03/07/singleton-vs-static/">&lt;p&gt;
I had spent one or two days to try to understand which one of these two approaches I should use for exactly what kind of usage.
&lt;/p&gt;
&lt;p&gt;
Thus, I here wrap up big features among what I have understood.
&lt;/p&gt;
&lt;p&gt;
Common:
&lt;ul&gt;
    &lt;li&gt;
    Static classes and members are stored in a special memory area called “High-Frequency Heap” and this area is excluded from Garbage Collector (GC). Classes that implement the Singleton pattern (let’s say Singleton class) also have static members so these are also excluded from GC. Therefore, these resources are released when a corresponding process or AppDomain end.
    &lt;/li&gt;
    &lt;br /&gt;
    &lt;li&gt;
    Both cannot be instantiated so share only one reference throughout an application.
    &lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;p&gt;
Difference:
&lt;ul&gt;
    &lt;li&gt;
    The static class cannot implement an interface or inherit other class. But it is possible for the Singleton class.
    &lt;/li&gt;
    &lt;br /&gt;
    &lt;li&gt;
    Developers can handle the point of time of instantiation by how they implement the laziness). On the other hand, the static class is dependent on Common Language Runtime (CLR).
    &lt;/li&gt;
    &lt;br /&gt;
    &lt;li&gt;
    The Singleton class can be written Thread-Unsafe, which means developers should handle this.
    &lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;p&gt;
In the course of googling, I have seen some said using the Singleton pattern is not good in terms of performance while some said using the static class is not good at performance. So I could not find the answer that says “This is it!”. However, I by myself have concluded like below.
&lt;/p&gt;
&lt;p&gt;
When to use the Singleton pattern:
&lt;ul&gt;
    &lt;li&gt;
    With the common sense, if only one instance is needed over an application. (Logging, caching, DB connection pool and hardware related jobs such as camera and sensor.
    &lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;p&gt;
When to use the static class:
&lt;ul&gt;
    &lt;li&gt;
    For simple utility-kind classes, global variables, an instance creation class of the Factory pattern, etc…. Mostly, things that can be resolved by using the static class.
    &lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;p&gt;
References:
&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dotnettutorials.net/lesson/singleton-vs-static-class/&quot;&gt;Singleton VS Static class in C#&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;http://csharpindepth.com/articles/Singleton&quot;&gt;Implementing the Singleton Pattern in C#&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;https://docs.microsoft.com/en-us/previous-versions/msp-n-p/ff650316(v%3dpandp.10)&quot;&gt;Implementing Singleton in C#&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;http://csharpindepth.com/articles/BeforeFieldInit&quot;&gt;C# and beforefieldinit&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;https://codeblog.jonskeet.uk/2010/01/26/type-initialization-changes-in-net-4-0/&quot;&gt;TYPE INITIALIZATION CHANGES IN .NET 4.0&lt;/a&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;h2 class=&quot;section-heading&quot;&gt;Happy Coding!&lt;/h2&gt;&lt;/blockquote&gt;</content><author><name></name></author><category term="tech" /><category term="C#" /><category term="Singleton" /><category term="Static" /><category term="Design Pattern" /><summary type="html">I had spent one or two days to try to understand which one of these two approaches I should use for exactly what kind of usage. Thus, I here wrap up big features among what I have understood. Common: Static classes and members are stored in a special memory area called “High-Frequency Heap” and this area is excluded from Garbage Collector (GC). Classes that implement the Singleton pattern (let’s say Singleton class) also have static members so these are also excluded from GC. Therefore, these resources are released when a corresponding process or AppDomain end. Both cannot be instantiated so share only one reference throughout an application. Difference: The static class cannot implement an interface or inherit other class. But it is possible for the Singleton class. Developers can handle the point of time of instantiation by how they implement the laziness). On the other hand, the static class is dependent on Common Language Runtime (CLR). The Singleton class can be written Thread-Unsafe, which means developers should handle this. In the course of googling, I have seen some said using the Singleton pattern is not good in terms of performance while some said using the static class is not good at performance. So I could not find the answer that says “This is it!”. However, I by myself have concluded like below. When to use the Singleton pattern: With the common sense, if only one instance is needed over an application. (Logging, caching, DB connection pool and hardware related jobs such as camera and sensor. When to use the static class: For simple utility-kind classes, global variables, an instance creation class of the Factory pattern, etc…. Mostly, things that can be resolved by using the static class. References: Singleton VS Static class in C# Implementing the Singleton Pattern in C# Implementing Singleton in C# C# and beforefieldinit TYPE INITIALIZATION CHANGES IN .NET 4.0 Happy Coding!</summary></entry><entry><title type="html">싱글턴 패턴 VS Static 클래스 in C#</title><link href="http://localhost:4000/tech/2019/03/07/singleton-vs-static-kr/" rel="alternate" type="text/html" title="싱글턴 패턴 VS Static 클래스 in C#" /><published>2019-03-07T00:00:00+01:00</published><updated>2019-03-07T00:00:00+01:00</updated><id>http://localhost:4000/tech/2019/03/07/singleton-vs-static-kr</id><content type="html" xml:base="http://localhost:4000/tech/2019/03/07/singleton-vs-static-kr/">&lt;p&gt;
몇일에 걸쳐 이 두가지 방법 중 정확히 어떤 걸 어떤 용도로 써야 하는지 이해를 하려고 노력했습니다.

이해한 내용 중 큰 특징들만 간단히 정리하자면,
&lt;/p&gt;
&lt;p&gt;
공통점:
&lt;ul&gt;
    &lt;li&gt;
    Static 클래스/멤버는 특수한 메모리 영역인 High-Frequency Heap 에 저장되고 이 영역은 Garbage Collector(이하 GC) 의 청소 대상이 아니다.  싱글턴 패턴을 구현한 클래스(이하 싱글턴 클래스) 역시 static 멤버를 가지고 있으므로 GC 의 청소 대상이 아니다. 따라서, 해당 프로세스나 AppDomain 이 종료될 때 해제된다.
    &lt;/li&gt;
    &lt;br /&gt;
    &lt;li&gt;
    둘 다 객체를 생성할 수 없고 하나의 레퍼런스만을 앱 전체에서 공유한다.
    &lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;p&gt;
차이점:
&lt;ul&gt;
    &lt;li&gt;
    Static 클래스는 인터페이스 구현 및 클래스 상속이 안 된다. 싱글턴 클래스는 된다.
    &lt;/li&gt;
    &lt;br /&gt;
    &lt;li&gt;
    싱글턴 클래스는 레퍼런스 생성 시점을 컨트롤 할 수 있다 (구현 방법에 따라 Laziness 조절 가능). Static 클래스는 Common Language Runtime (CLR) 에 의존적이다.
    &lt;/li&gt;
    &lt;br /&gt;
    &lt;li&gt;
    싱글턴 클래스는 Thread-Unsafe 하게 작성할 수도 있다. (즉, 개발자가 이를 컨트롤 해줘야 한다.)
    &lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;p&gt;
구글링을 하다보니 싱글턴 클래스를 쓰는 게 성능 입장에서는 좋지 않다. 라는 얘기도 있고 Static 클래스가 성능 입장에서 좋지 않다. 라는 글도 있고 해서 명확하게 딱 이거다! 라고 할 만한 답을 찾지는 못했습니다만, 이해한 바를 토대로 아래와 같이 쓰면 되겠다는 결론을 내렸습니다.
&lt;/p&gt;
&lt;p&gt;
싱글턴 클래스를 쓰는 경우:
&lt;ul&gt;
    &lt;li&gt;
    상식적으로 생각했을 때, 하나의 인스턴스만 있어야 하는 경우 (로깅, 캐싱, DB 커넥션 풀, 카메라, 센서 등 하드웨어 관련 작업 클래스)
    &lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;p&gt;
Static 클래스를 쓰는 경우: 
&lt;ul&gt;
    &lt;li&gt;
    간단하게 Utility 용도로 사용되는 함수나 글로벌 변수, 팩토리 패턴 중 생성 클래스 등등.. 주로 Static 만으로 간단히 해결할 수 있는 것들
    &lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;p&gt;
참고 자료:
&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dotnettutorials.net/lesson/singleton-vs-static-class/&quot;&gt;Singleton VS Static class in C#&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;http://csharpindepth.com/articles/Singleton&quot;&gt;Implementing the Singleton Pattern in C#&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;https://docs.microsoft.com/en-us/previous-versions/msp-n-p/ff650316(v%3dpandp.10)&quot;&gt;Implementing Singleton in C#&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;http://csharpindepth.com/articles/BeforeFieldInit&quot;&gt;C# and beforefieldinit&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;https://codeblog.jonskeet.uk/2010/01/26/type-initialization-changes-in-net-4-0/&quot;&gt;TYPE INITIALIZATION CHANGES IN .NET 4.0&lt;/a&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;h2 class=&quot;section-heading&quot;&gt;Happy Coding!&lt;/h2&gt;&lt;/blockquote&gt;</content><author><name></name></author><category term="tech" /><category term="C#" /><category term="Singleton" /><category term="Static" /><category term="Design Pattern" /><summary type="html">몇일에 걸쳐 이 두가지 방법 중 정확히 어떤 걸 어떤 용도로 써야 하는지 이해를 하려고 노력했습니다.</summary></entry><entry><title type="html">책 꾸뻬씨의 행복여행 독서 후기 두번째</title><link href="http://localhost:4000/blog/2018/01/02/hector-book-review/" rel="alternate" type="text/html" title="책 꾸뻬씨의 행복여행 독서 후기 두번째" /><published>2018-01-02T00:00:00+01:00</published><updated>2018-01-02T00:00:00+01:00</updated><id>http://localhost:4000/blog/2018/01/02/hector-book-review</id><content type="html" xml:base="http://localhost:4000/blog/2018/01/02/hector-book-review/">&lt;blockquote&gt;
&lt;a href=&quot;/blog/2017/06/27/hector-book-review/&quot;&gt;이전 후기&lt;/a&gt;
&lt;/blockquote&gt;
&lt;p&gt;
이 책에 대한 예전 후기를 보고 지금과 달라진 부분들이 있어 기록을 남겨야겠다고 생각했다. 예전 글에서처럼 행복을 느낄 수 있는 다양한 방법에 최대한 노출되어야 한다는 생각은 지금도 같지만 그 강도나 빈도에 대해 생각하고 행복의 전제 조건에 대해 생각해보게 되었다.
&lt;/p&gt;
&lt;p&gt;
우선 예전 글을 읽다가 문득 든 생각은 불행이 없으면 행복도 없다는 생각이었다. 인간이 항상 행복하다면 그걸 행복이라고 인지할 수 있을까? 아마 아닐 것이다. 행복을 느낄 수 있는 것은 불행한 순간이 있었기 때문일 것이다. 아름다움도 추함이 있기에 알 수 있는 것일 거다. 악이 존재하기에 선이 구별되듯. 모두가 행복한 세상, 유토피아, 아마 실제로 그런 세상이 구현된다 할 지라도 불행을 겪었던 세대에게만 해당될 것이다. 유토피아에서 태어난 세대는 그게 유토피아인지조차 알 수 없을테니. 결국, 행복하려면 불행을 겪어야 한다는 말이 될 것이다. 행복과 불행 사이를 왔다갔다 해야 행복을 느낄 수 있고 더 행복할 수 있지 않을까 조심스레 생각을 해 본다. 아마 불행의 강도가 셌던 사람은 행복의 순간에 느끼게 되는 강도도 더 세지 않을까라는 생각도 조심스레 해본다. 그냥 불행의 순간을 존버하면서 행복의 순간이 왔을 때 만끽해야겠다.
&lt;/p&gt;
&lt;p&gt;
그리고 안타깝게도, 태양과 바다라는 행복을 찾아가려는 시도는 물거품이 되버리고 아이러니하게도 태양과 바다에서 더 멀어진 곳으로 오려고 하고 있다. 그 대신 또 다른 종류의 행복을 찾으려고 시도하고 있다. 나에게 주어진 상황에 대해 낙담하지 말고 그 시간에 다른 방법을 찾아보는 게 도움이 된다. 쓸데없는 감정소비를 하지 말아야겠다. 불행은 행복의 전제조건이다.
&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;/blog/img/20170627/hector-cover.jpg&quot; alt=&quot;Book Hector and the search for happiness cover&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="blog" /><category term="Book" /><category term="Review" /><summary type="html">이전 후기 이 책에 대한 예전 후기를 보고 지금과 달라진 부분들이 있어 기록을 남겨야겠다고 생각했다. 예전 글에서처럼 행복을 느낄 수 있는 다양한 방법에 최대한 노출되어야 한다는 생각은 지금도 같지만 그 강도나 빈도에 대해 생각하고 행복의 전제 조건에 대해 생각해보게 되었다. 우선 예전 글을 읽다가 문득 든 생각은 불행이 없으면 행복도 없다는 생각이었다. 인간이 항상 행복하다면 그걸 행복이라고 인지할 수 있을까? 아마 아닐 것이다. 행복을 느낄 수 있는 것은 불행한 순간이 있었기 때문일 것이다. 아름다움도 추함이 있기에 알 수 있는 것일 거다. 악이 존재하기에 선이 구별되듯. 모두가 행복한 세상, 유토피아, 아마 실제로 그런 세상이 구현된다 할 지라도 불행을 겪었던 세대에게만 해당될 것이다. 유토피아에서 태어난 세대는 그게 유토피아인지조차 알 수 없을테니. 결국, 행복하려면 불행을 겪어야 한다는 말이 될 것이다. 행복과 불행 사이를 왔다갔다 해야 행복을 느낄 수 있고 더 행복할 수 있지 않을까 조심스레 생각을 해 본다. 아마 불행의 강도가 셌던 사람은 행복의 순간에 느끼게 되는 강도도 더 세지 않을까라는 생각도 조심스레 해본다. 그냥 불행의 순간을 존버하면서 행복의 순간이 왔을 때 만끽해야겠다. 그리고 안타깝게도, 태양과 바다라는 행복을 찾아가려는 시도는 물거품이 되버리고 아이러니하게도 태양과 바다에서 더 멀어진 곳으로 오려고 하고 있다. 그 대신 또 다른 종류의 행복을 찾으려고 시도하고 있다. 나에게 주어진 상황에 대해 낙담하지 말고 그 시간에 다른 방법을 찾아보는 게 도움이 된다. 쓸데없는 감정소비를 하지 말아야겠다. 불행은 행복의 전제조건이다.</summary></entry><entry><title type="html">영화 Flipped 관람 후기</title><link href="http://localhost:4000/blog/2018/01/02/flipped-movie-review/" rel="alternate" type="text/html" title="영화 Flipped 관람 후기" /><published>2018-01-02T00:00:00+01:00</published><updated>2018-01-02T00:00:00+01:00</updated><id>http://localhost:4000/blog/2018/01/02/flipped-movie-review</id><content type="html" xml:base="http://localhost:4000/blog/2018/01/02/flipped-movie-review/">&lt;p&gt;
영어공부 컨텐츠로 부분부분을 보다보니 전체 영화가 궁금해져서 보게되었다. 이미 큰 흐름은 알고 있었지만 끊겨있는 그 속의 내용들이 무척 궁금했다. 소년소녀의 눈으로 얘기하는 삶은 30대가 넘어선 나에게 내 아이들이 앞으로 살아갈 삶을 어떻게 함께 해 줘야할지 생각할 수 있는 기회를 주었다. 큰 줄기는 소년소녀의 아름다운 첫사랑 이야기이지만 그 과정에 극단적인 두 가족의 모습을 통해 메시지를 전하고 있다고 생각한다.
&lt;/p&gt;
&lt;p&gt;
소녀는 가난하지만 가족을 소중히 여기고 서로 존중해 주는 가정을 가지고 있고, 소년은 부유하지만 돈이 되지 않으면 쓸모없다고 생각하는 아빠를 둔 가정을 가지고 있다. 7살에 잘생긴 외모와 눈에 반했다가 성장하면서 점차 본질을 보는 시야를 가지게 되면서 소년에게서 멀어져가는 소녀와, 
자기를 좋다고 쫓아다니는 소녀에게서 멀어지려고 노력하다 이 소녀가 가진 내면의 아름다움에 점차 매료되어 자신도 그 내면에 동화되어 소녀를 좋아하게 되는 소년. 사실 소년은 잘 생겼지만 전형적인 가정에서 자라난 아직 속이 차지 않은 그냥 평범한 아이였고 소녀는 따뜻한 가정에서 자라나 가족의 지원을 듬뿍 받으며 삶에 대해 다른 아이들보다 빨리 알아가는 아이였다.
&lt;/p&gt;
&lt;p&gt;
이 두 소년소녀의 눈으로 극단적인 두 가정의 모습을 보여주지만 공통점은 모두 자기들이 사랑하는 것들을 지키려고 했다.
&lt;/p&gt;
&lt;p&gt;
소녀의 가정에는 엄마, 아빠, 두 오빠, 소녀가 있었는데 아빠는 자신의 가족과 발달장애자인 동생, 그리고 자신이 사랑하는 그림에 모든 가치를 두었고, 엄마는 자식들과 자신이 사랑하는 남편에 모든 가치를 두고 지키려 했다. 두 오빠는 자신들이 좋아하는 노래와 음악에 가치를 두었고, 소녀는 가족과 아빠가 말한 부분이 아닌 전체를 보는 방법을 알게 해 준 큰 무화과나무에 가치를 두었다.
&lt;/p&gt;
&lt;p&gt;
소년의 가정에는 엄마, 아빠, 외할아버지, 누나, 소년이 있었는데 아빠는 자신이 사랑하는 아내와 돈 때문에 좋아하던 음악을 포기하고 돈을 선택한 자신의 자존심에 가치를 두었고, 엄마는 가족에 가치를 두었고, 외할아버지는 이미 세상을 떠난 아내에 가치를 두었다. 누나는 비중이 크지 않고 알아낼 수 있는 부분이 없어서 모르겠고, 소년은 그냥 그저 그런 소년이었다.
&lt;/p&gt;
&lt;p&gt;
진실은 단순하고 지루하다고 들은 것 같다. 어떤 것들을 사랑하고 가치를 두어야 하는지에 대해 뻔한 진실을 어린 아이들의 성장기로 보여주는 아름다운 영화였다.
&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;/blog/img/20180102/flipped-poster.jpg&quot; alt=&quot;Movie Flipped poster&quot; /&gt;
&lt;/a&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;Flipped - 2010&lt;/span&gt;&lt;/p&gt;</content><author><name></name></author><category term="blog" /><category term="Movie" /><category term="Review" /><summary type="html">영어공부 컨텐츠로 부분부분을 보다보니 전체 영화가 궁금해져서 보게되었다. 이미 큰 흐름은 알고 있었지만 끊겨있는 그 속의 내용들이 무척 궁금했다. 소년소녀의 눈으로 얘기하는 삶은 30대가 넘어선 나에게 내 아이들이 앞으로 살아갈 삶을 어떻게 함께 해 줘야할지 생각할 수 있는 기회를 주었다. 큰 줄기는 소년소녀의 아름다운 첫사랑 이야기이지만 그 과정에 극단적인 두 가족의 모습을 통해 메시지를 전하고 있다고 생각한다. 소녀는 가난하지만 가족을 소중히 여기고 서로 존중해 주는 가정을 가지고 있고, 소년은 부유하지만 돈이 되지 않으면 쓸모없다고 생각하는 아빠를 둔 가정을 가지고 있다. 7살에 잘생긴 외모와 눈에 반했다가 성장하면서 점차 본질을 보는 시야를 가지게 되면서 소년에게서 멀어져가는 소녀와, 자기를 좋다고 쫓아다니는 소녀에게서 멀어지려고 노력하다 이 소녀가 가진 내면의 아름다움에 점차 매료되어 자신도 그 내면에 동화되어 소녀를 좋아하게 되는 소년. 사실 소년은 잘 생겼지만 전형적인 가정에서 자라난 아직 속이 차지 않은 그냥 평범한 아이였고 소녀는 따뜻한 가정에서 자라나 가족의 지원을 듬뿍 받으며 삶에 대해 다른 아이들보다 빨리 알아가는 아이였다. 이 두 소년소녀의 눈으로 극단적인 두 가정의 모습을 보여주지만 공통점은 모두 자기들이 사랑하는 것들을 지키려고 했다. 소녀의 가정에는 엄마, 아빠, 두 오빠, 소녀가 있었는데 아빠는 자신의 가족과 발달장애자인 동생, 그리고 자신이 사랑하는 그림에 모든 가치를 두었고, 엄마는 자식들과 자신이 사랑하는 남편에 모든 가치를 두고 지키려 했다. 두 오빠는 자신들이 좋아하는 노래와 음악에 가치를 두었고, 소녀는 가족과 아빠가 말한 부분이 아닌 전체를 보는 방법을 알게 해 준 큰 무화과나무에 가치를 두었다. 소년의 가정에는 엄마, 아빠, 외할아버지, 누나, 소년이 있었는데 아빠는 자신이 사랑하는 아내와 돈 때문에 좋아하던 음악을 포기하고 돈을 선택한 자신의 자존심에 가치를 두었고, 엄마는 가족에 가치를 두었고, 외할아버지는 이미 세상을 떠난 아내에 가치를 두었다. 누나는 비중이 크지 않고 알아낼 수 있는 부분이 없어서 모르겠고, 소년은 그냥 그저 그런 소년이었다. 진실은 단순하고 지루하다고 들은 것 같다. 어떤 것들을 사랑하고 가치를 두어야 하는지에 대해 뻔한 진실을 어린 아이들의 성장기로 보여주는 아름다운 영화였다. Flipped - 2010</summary></entry><entry><title type="html">책 누워서 읽는 알고리즘 독서 후기</title><link href="http://localhost:4000/blog/2018/01/02/algorithm-book-review/" rel="alternate" type="text/html" title="책 누워서 읽는 알고리즘 독서 후기" /><published>2018-01-02T00:00:00+01:00</published><updated>2018-01-02T00:00:00+01:00</updated><id>http://localhost:4000/blog/2018/01/02/algorithm-book-review</id><content type="html" xml:base="http://localhost:4000/blog/2018/01/02/algorithm-book-review/">&lt;p&gt;
이러이러한 알고리즘이 있고 배경은 이렇다..까지만 이해할 수 있었다. 이 책을 읽으면서, 그리고 해외취업을 위해 외국 회사들에 기술 인터뷰를
보면서 느꼈던 건 절망감이었다. 그동안 나는 무얼 한걸까? 기술 인터뷰에서의 내 모습은 그냥 대학에 처음 들어와 첫번째 중간고사 시험을
치르는 학생의 모습이었다. 거기에 플러스로 경력을 보고 환대하던 인터뷰어들의 실망하는 표정들이란. 나에게는 자극이란 것이 없는지
당황스럽고 우울해지긴 하지만 뭔가 오기가 생기지는 않았다. 전혀 머리가 돌아가지가 않았다. 이런 문제들을 무사히 잘 헤쳐나가 일하고 있는
세상의 수 많은 개발자들은 그럼 도대체 얼마나 똑똑하단 말인가. 세상에 이렇게나 많은 똑똑한 사람들이 있을 줄은 몰랐다.
&lt;/p&gt;
&lt;p&gt;
세상은 개발자들에게 서로 의견을 공유하고 대화를 하라고 하는데 이런 똑똑한 사람들하고 대화를 할 만한 레벨이 내가 되는가? 그렇다고 그걸 단시간에 따라잡기 위해 잠을 줄여가며 열심히 공부할 내가 아니라 결국, 천천히 나 혼자 공부를 하게 된다. 사실 프로그래밍에 미쳐있는 것도 아니고 좋아하는 것도 아니니 그냥 내가 원하는대로 돈 적당히 잘 벌면서 오래 일할 수 있고 시간과 장소의 제약만 없었으면 좋겠다. 열심히 하지 말자. 난 열심히 할 수 있는 사람은 아니다. 그냥 꾸준히 할 뿐이다.
&lt;/p&gt;
&lt;p&gt;
언젠가 시간이 지나 내가 좀 더 아는게 많아진다면 그 때 다시 읽어봐야겠다.
&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;/blog/img/20180102/book-algorithm.jpg&quot; alt=&quot;누워서 읽는 알고리즘 책 표지&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="blog" /><category term="Book" /><category term="Review" /><summary type="html">이러이러한 알고리즘이 있고 배경은 이렇다..까지만 이해할 수 있었다. 이 책을 읽으면서, 그리고 해외취업을 위해 외국 회사들에 기술 인터뷰를 보면서 느꼈던 건 절망감이었다. 그동안 나는 무얼 한걸까? 기술 인터뷰에서의 내 모습은 그냥 대학에 처음 들어와 첫번째 중간고사 시험을 치르는 학생의 모습이었다. 거기에 플러스로 경력을 보고 환대하던 인터뷰어들의 실망하는 표정들이란. 나에게는 자극이란 것이 없는지 당황스럽고 우울해지긴 하지만 뭔가 오기가 생기지는 않았다. 전혀 머리가 돌아가지가 않았다. 이런 문제들을 무사히 잘 헤쳐나가 일하고 있는 세상의 수 많은 개발자들은 그럼 도대체 얼마나 똑똑하단 말인가. 세상에 이렇게나 많은 똑똑한 사람들이 있을 줄은 몰랐다. 세상은 개발자들에게 서로 의견을 공유하고 대화를 하라고 하는데 이런 똑똑한 사람들하고 대화를 할 만한 레벨이 내가 되는가? 그렇다고 그걸 단시간에 따라잡기 위해 잠을 줄여가며 열심히 공부할 내가 아니라 결국, 천천히 나 혼자 공부를 하게 된다. 사실 프로그래밍에 미쳐있는 것도 아니고 좋아하는 것도 아니니 그냥 내가 원하는대로 돈 적당히 잘 벌면서 오래 일할 수 있고 시간과 장소의 제약만 없었으면 좋겠다. 열심히 하지 말자. 난 열심히 할 수 있는 사람은 아니다. 그냥 꾸준히 할 뿐이다. 언젠가 시간이 지나 내가 좀 더 아는게 많아진다면 그 때 다시 읽어봐야겠다.</summary></entry><entry><title type="html">책 읽기 방법에 대한 나의 결론</title><link href="http://localhost:4000/blog/2018/01/02/reading-method/" rel="alternate" type="text/html" title="책 읽기 방법에 대한 나의 결론" /><published>2018-01-02T00:00:00+01:00</published><updated>2018-01-02T00:00:00+01:00</updated><id>http://localhost:4000/blog/2018/01/02/reading-method</id><content type="html" xml:base="http://localhost:4000/blog/2018/01/02/reading-method/">&lt;p&gt;
나는 책을 읽을 때 주로 속으로 글을 읽으면서 읽는다. 속발음이라고 하는 것 같은데 속도가 무척 느리다. 그러다보니 책 한 권을 다 읽는데
시간이 너무 오래 걸리고 흐름이 잘 끊겨서 스토리가 잘 생각이 안 나는 경우가 허다하다.
&lt;/p&gt;
&lt;p&gt;
보통의 경우 속으로 소리내어 읽지 않고 눈으로만 읽는다고 하는데, 이를 묵독이라고 한다, 글쎄, 시도는 해 보았지만 잘 되지 않는다. 속독을 해 보려는 시도는 번번이 실패한다. 그래서 그냥 있는 그대로 자연스럽게 읽기로 했다. 대신 책을 다 읽고나면 후기를 꼭 남겨서 다시 한 번 되새겨 보는 걸로 책 읽는 방법에 대한 나의 오래된 고민을 해결하려 한다.
&lt;/p&gt;
&lt;p&gt;
속도는 엄청 느리겠지만 적어도 안 읽는 것보단 나을거라 생각한다.
&lt;/p&gt;</content><author><name></name></author><category term="blog" /><category term="Book" /><category term="Reading" /><summary type="html">나는 책을 읽을 때 주로 속으로 글을 읽으면서 읽는다. 속발음이라고 하는 것 같은데 속도가 무척 느리다. 그러다보니 책 한 권을 다 읽는데 시간이 너무 오래 걸리고 흐름이 잘 끊겨서 스토리가 잘 생각이 안 나는 경우가 허다하다. 보통의 경우 속으로 소리내어 읽지 않고 눈으로만 읽는다고 하는데, 이를 묵독이라고 한다, 글쎄, 시도는 해 보았지만 잘 되지 않는다. 속독을 해 보려는 시도는 번번이 실패한다. 그래서 그냥 있는 그대로 자연스럽게 읽기로 했다. 대신 책을 다 읽고나면 후기를 꼭 남겨서 다시 한 번 되새겨 보는 걸로 책 읽는 방법에 대한 나의 오래된 고민을 해결하려 한다. 속도는 엄청 느리겠지만 적어도 안 읽는 것보단 나을거라 생각한다.</summary></entry><entry><title type="html">Layouts in Xamarin.Forms</title><link href="http://localhost:4000/tech/2017/12/15/layouts-in-xamarin-forms/" rel="alternate" type="text/html" title="Layouts in Xamarin.Forms" /><published>2017-12-15T00:00:00+01:00</published><updated>2017-12-15T00:00:00+01:00</updated><id>http://localhost:4000/tech/2017/12/15/layouts-in-xamarin-forms</id><content type="html" xml:base="http://localhost:4000/tech/2017/12/15/layouts-in-xamarin-forms/">&lt;p&gt;
In order to build up a well-made app, it is important to keep the same look on every devices. Therefore, Xamarin.Forms provides flexible layout containers. These containers calculate positions and sizes of UI components automatically and re-calculate them when a user rotates a device or changes a view size also automatically. These layout containers that Xamarin.Forms provides are StackLayout, Grid, AbsoluteLayout and RelativeLayout and StackLayout and Grid are popular among them.
&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;/tech/img/20171215/1.png&quot; alt=&quot;Types of layout container&quot; /&gt;
&lt;/a&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;Types of layout container&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
You can use WidthRequest and HeightRequest attributes to set width and height ot each UI component instead of width and height that are normally used in general because Xamarin.Forms doesn't guarantee exact sizes as they are re-calculated based on which platform the app is run. For alignment, you can use VerticalOptions and HorizontalOptions attributes.
&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;/tech/img/20171215/2.png&quot; alt=&quot;Width and height attributes of UI component&quot; /&gt;
&lt;/a&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;Width and height attributes of UI component&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
Each platform has different way to translate sizes and resolutions so if you set WidthRequest and HeightRequest, then although absolute sizes might not be same but would have the same look.
&lt;/p&gt;
&lt;p&gt;Resolution method on major platforms.&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Windows Phone – Effective pixels&lt;/li&gt;
    &lt;li&gt;iPhone – Points&lt;/li&gt;
    &lt;li&gt;Androind – Density-independent pixels&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;/tech/img/20171215/4.png&quot; alt=&quot;UI component size on each platform&quot; /&gt;
&lt;/a&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;UI component size on each platform&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
Let's look into two popular layout containers, StackLayout and Grid.
&lt;/p&gt;
&lt;p&gt;
StackLayout is just to stack up UI components in vertical way. As it is very simple, it is also used for building up prototypes.
&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;/tech/img/20171215/5.png&quot; alt=&quot;StackLayout container&quot; /&gt;
&lt;/a&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;StackLayout container&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
Grid is similar to table. You can set the size of rows and columns in &lt;code&gt;&amp;lt;Grid&amp;gt;&lt;/code&gt; tag and can set where each UI component locates by Grid.Row and Grid.Column. Besides, You can make the layout flexible using attributes like RowSpan and ColumnSpan in HTML.
&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;/tech/img/20171215/6.png&quot; alt=&quot;Grid container&quot; /&gt;
&lt;/a&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;Grid container&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
In general, layout containers and UI components have same attributes like the web design such as spacing, padding and margin. Hence, if you already know how to design a webpage, it would be easier to understand the layouts in Xamarin.Forms.
&lt;/p&gt;
&lt;blockquote&gt;&lt;h2 class=&quot;section-heading&quot;&gt;Happy Coding!&lt;/h2&gt;&lt;/blockquote&gt;</content><author><name></name></author><category term="tech" /><category term="Xamarin" /><category term="C#" /><category term="Mobile" /><summary type="html">In order to build up a well-made app, it is important to keep the same look on every devices. Therefore, Xamarin.Forms provides flexible layout containers. These containers calculate positions and sizes of UI components automatically and re-calculate them when a user rotates a device or changes a view size also automatically. These layout containers that Xamarin.Forms provides are StackLayout, Grid, AbsoluteLayout and RelativeLayout and StackLayout and Grid are popular among them. Types of layout container You can use WidthRequest and HeightRequest attributes to set width and height ot each UI component instead of width and height that are normally used in general because Xamarin.Forms doesn't guarantee exact sizes as they are re-calculated based on which platform the app is run. For alignment, you can use VerticalOptions and HorizontalOptions attributes. Width and height attributes of UI component Each platform has different way to translate sizes and resolutions so if you set WidthRequest and HeightRequest, then although absolute sizes might not be same but would have the same look. Resolution method on major platforms. Windows Phone – Effective pixels iPhone – Points Androind – Density-independent pixels UI component size on each platform Let's look into two popular layout containers, StackLayout and Grid. StackLayout is just to stack up UI components in vertical way. As it is very simple, it is also used for building up prototypes. StackLayout container Grid is similar to table. You can set the size of rows and columns in &amp;lt;Grid&amp;gt; tag and can set where each UI component locates by Grid.Row and Grid.Column. Besides, You can make the layout flexible using attributes like RowSpan and ColumnSpan in HTML. Grid container In general, layout containers and UI components have same attributes like the web design such as spacing, padding and margin. Hence, if you already know how to design a webpage, it would be easier to understand the layouts in Xamarin.Forms. Happy Coding!</summary></entry><entry><title type="html">Xamarin.Forms 레이아웃</title><link href="http://localhost:4000/tech/2017/12/15/layouts-in-xamarin-forms-kr/" rel="alternate" type="text/html" title="Xamarin.Forms 레이아웃" /><published>2017-12-15T00:00:00+01:00</published><updated>2017-12-15T00:00:00+01:00</updated><id>http://localhost:4000/tech/2017/12/15/layouts-in-xamarin-forms-kr</id><content type="html" xml:base="http://localhost:4000/tech/2017/12/15/layouts-in-xamarin-forms-kr/">&lt;p&gt;
앱을 제대로 만드려면 화면 크기나 해상도가 다른 여러 기기 모두에서 동일한 디자인을 유지해야 하는데 이를 위해 Xamarin.Forms 에서는 유연한 레이아웃 컨테이너들을 제공한다. 이 컴포넌트들은 UI 컨트롤들의 크기 및 위치를 자동으로 계산해주고, 사용자가 기기를 회전하거나 화면 크기를 변경할 경우 자동 재계산 해준다. 이러한 레이아웃 컨테이너에는 StackLayout, Grid, AbsoluteLayout, RelativeLayout 이 있는데 그 중 StackLayout 과 Grid 이 가장 많이 사용된다.
&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;/tech/img/20171215/1.png&quot; alt=&quot;레이아웃 컨테이너 종류&quot; /&gt;
&lt;/a&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;레이아웃 컨테이너 종류&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
Xamarin.Forms 에서 제공하는 레이아웃 컨테이너들은 자동 계산이 되기 때문에 각각 UI 컨트롤의 크기를 지정할 때 일반적인 Width, Height 가 아닌 WidthRequest, HeightRequest 속성을 사용하여 크기를 지정하게 된다. 그리고 컨트롤들의 가로, 세로 정렬을 위해 VerticalOptions, HorizontalOptions 속성이 제공된다.
&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;/tech/img/20171215/2.png&quot; alt=&quot;컨트롤 가로, 세로 속성&quot; /&gt;
&lt;/a&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;컨트롤 가로, 세로 속성&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
플랫폼들마다 사용하는 해상도 처리 방식이 아래와 같이 틀리기 때문에 아래와 같이 WidthRequest, HeightRequest 를 지정하면 화면 비율 및 플랫폼에 따라 크기가 틀려지지만 동일한 디자인을 유지하게 된다.
&lt;/p&gt;
&lt;p&gt;해상도 처리방식&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;윈도우폰 – Effective pixels&lt;/li&gt;
    &lt;li&gt;아이폰 – Points&lt;/li&gt;
    &lt;li&gt;안드로이드 – Density-independent pixels&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;/tech/img/20171215/4.png&quot; alt=&quot;플랫폼별 컨트롤 크기&quot; /&gt;
&lt;/a&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;플랫폼별 컨트롤 크기&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
많이 사용되어지는 StackLayout 과 Grid 에 대해 잠깐 살펴보겠다.
&lt;/p&gt;
&lt;p&gt;
StackLayout 은 아래와 같이 UI 컨트롤들을 세로 방향으로 추가해 가는 방식인데 간단하여 프로토타이핑에 많이 사용되어진다.
&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;/tech/img/20171215/5.png&quot; alt=&quot;StackLayout 방식&quot; /&gt;
&lt;/a&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;StackLayout 방식&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
Grid 는 테이블과 동일하다고 생각하면 될 듯하다. &lt;code&gt;&amp;lt;Grid&amp;gt;&lt;/code&gt; 태그 안에 각 행, 열의 크기를 미리 지정할 수도 있고 각 UI 컨트롤이 들어갈 셀의 위치를 Grid.Row, Grid.Column 으로 지정하면 된다. HTML 의 RowSpan, ColumnSpan 등과 같은 속성들을 사용하여 유연하게 컨트롤들을 배치시킬 수 있다.
&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;/tech/img/20171215/6.png&quot; alt=&quot;Grid 방식&quot; /&gt;
&lt;/a&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;Grid 방식&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
전반적인 레이아웃 컨테이너 및 컨트롤들에 Spacing, Padding, Margin 과 같은 화면 디자인에 필요한 속성들도 사용할 수 있는 걸로 보아 웹 디자인을 간단하게 이해하고 있으면 이해가 더 수월하리라 생각된다.
&lt;/p&gt;
&lt;blockquote&gt;&lt;h2 class=&quot;section-heading&quot;&gt;Happy Coding!&lt;/h2&gt;&lt;/blockquote&gt;</content><author><name></name></author><category term="tech" /><category term="Xamarin" /><category term="C#" /><category term="Mobile" /><summary type="html">앱을 제대로 만드려면 화면 크기나 해상도가 다른 여러 기기 모두에서 동일한 디자인을 유지해야 하는데 이를 위해 Xamarin.Forms 에서는 유연한 레이아웃 컨테이너들을 제공한다. 이 컴포넌트들은 UI 컨트롤들의 크기 및 위치를 자동으로 계산해주고, 사용자가 기기를 회전하거나 화면 크기를 변경할 경우 자동 재계산 해준다. 이러한 레이아웃 컨테이너에는 StackLayout, Grid, AbsoluteLayout, RelativeLayout 이 있는데 그 중 StackLayout 과 Grid 이 가장 많이 사용된다. 레이아웃 컨테이너 종류 Xamarin.Forms 에서 제공하는 레이아웃 컨테이너들은 자동 계산이 되기 때문에 각각 UI 컨트롤의 크기를 지정할 때 일반적인 Width, Height 가 아닌 WidthRequest, HeightRequest 속성을 사용하여 크기를 지정하게 된다. 그리고 컨트롤들의 가로, 세로 정렬을 위해 VerticalOptions, HorizontalOptions 속성이 제공된다. 컨트롤 가로, 세로 속성 플랫폼들마다 사용하는 해상도 처리 방식이 아래와 같이 틀리기 때문에 아래와 같이 WidthRequest, HeightRequest 를 지정하면 화면 비율 및 플랫폼에 따라 크기가 틀려지지만 동일한 디자인을 유지하게 된다. 해상도 처리방식 윈도우폰 – Effective pixels 아이폰 – Points 안드로이드 – Density-independent pixels 플랫폼별 컨트롤 크기 많이 사용되어지는 StackLayout 과 Grid 에 대해 잠깐 살펴보겠다. StackLayout 은 아래와 같이 UI 컨트롤들을 세로 방향으로 추가해 가는 방식인데 간단하여 프로토타이핑에 많이 사용되어진다. StackLayout 방식 Grid 는 테이블과 동일하다고 생각하면 될 듯하다. &amp;lt;Grid&amp;gt; 태그 안에 각 행, 열의 크기를 미리 지정할 수도 있고 각 UI 컨트롤이 들어갈 셀의 위치를 Grid.Row, Grid.Column 으로 지정하면 된다. HTML 의 RowSpan, ColumnSpan 등과 같은 속성들을 사용하여 유연하게 컨트롤들을 배치시킬 수 있다. Grid 방식 전반적인 레이아웃 컨테이너 및 컨트롤들에 Spacing, Padding, Margin 과 같은 화면 디자인에 필요한 속성들도 사용할 수 있는 걸로 보아 웹 디자인을 간단하게 이해하고 있으면 이해가 더 수월하리라 생각된다. Happy Coding!</summary></entry><entry><title type="html">XAML in Xamarin</title><link href="http://localhost:4000/tech/2017/12/10/xaml-in-xamarin/" rel="alternate" type="text/html" title="XAML in Xamarin" /><published>2017-12-10T00:00:00+01:00</published><updated>2017-12-10T00:00:00+01:00</updated><id>http://localhost:4000/tech/2017/12/10/xaml-in-xamarin</id><content type="html" xml:base="http://localhost:4000/tech/2017/12/10/xaml-in-xamarin/">&lt;p&gt;
What isi XAML? It is an acronym for eXtensible Application Markup Language and is used to seperate UI and functional codes. UI codes can be placed in the behind C# codes and can be controlled there, however that would cause difficulties to work on view designs and function implementations repectively because they are mixed up in one file. (of course, for dynamic generation of UI componenets helplessly should be implemented in this way)
&lt;/p&gt;
&lt;p&gt;
The key point of popular patterns or approaches thesedays in development such as MVC, MVVM and DI is to seperate each role or interest as a component and make it independent. After that, to mix and match those components to complete a product like machinary assembly. It went a bit far. By the way, due to the benefits we could get from modularization, I think UI and functions should also be seperated but it might depend on situations.
&lt;/p&gt;
&lt;p&gt;
XAML code and behind code can be mapped like this.
&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;/tech/img/20171210/2.png&quot; alt=&quot;Mapping between UI code and XAML code&quot; /&gt;
&lt;/a&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;Mapping between UI code and XAML code&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
XAML is used in WPF, Silverlight, UWP and Windows Workflow. Xamarin.Forms also uses the same grammar like others but it has unique grammars so it cannot be same like others. Here, I think just knowing XAML is used in those technologies is enough.
&lt;/p&gt;
&lt;p&gt;
Like HTML tags, each XAML tags can take event handlers.
&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;/tech/img/20171210/03.png&quot; alt=&quot;Add an TextChanged event handler in XAML code&quot; /&gt;
&lt;/a&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;Add an TextChanged event handler in XAML code&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
In Xamarin.Forms XAML, it supports Markup Extension for flexible settings of UI control attributes and for settings for respective mobile platforms, it provides the Device.OS property. Besides, it provides the reusable capsulation of components, which is called ContentView, so that it could be used in another UI like the user control feature in WinForms. When it comes to this feature, it would be better to check it out from &lt;a href=&quot;https://university.xamarin.com/welcome&quot; target=&quot;_blank&quot;&gt;Xamarin University&lt;/a&gt;
&lt;/p&gt;
&lt;blockquote&gt;&lt;h2 class=&quot;section-heading&quot;&gt;Happy Coding!&lt;/h2&gt;&lt;/blockquote&gt;</content><author><name></name></author><category term="tech" /><category term="Xamarin" /><category term="C#" /><category term="Mobile" /><summary type="html">What isi XAML? It is an acronym for eXtensible Application Markup Language and is used to seperate UI and functional codes. UI codes can be placed in the behind C# codes and can be controlled there, however that would cause difficulties to work on view designs and function implementations repectively because they are mixed up in one file. (of course, for dynamic generation of UI componenets helplessly should be implemented in this way) The key point of popular patterns or approaches thesedays in development such as MVC, MVVM and DI is to seperate each role or interest as a component and make it independent. After that, to mix and match those components to complete a product like machinary assembly. It went a bit far. By the way, due to the benefits we could get from modularization, I think UI and functions should also be seperated but it might depend on situations. XAML code and behind code can be mapped like this. Mapping between UI code and XAML code XAML is used in WPF, Silverlight, UWP and Windows Workflow. Xamarin.Forms also uses the same grammar like others but it has unique grammars so it cannot be same like others. Here, I think just knowing XAML is used in those technologies is enough. Like HTML tags, each XAML tags can take event handlers. Add an TextChanged event handler in XAML code In Xamarin.Forms XAML, it supports Markup Extension for flexible settings of UI control attributes and for settings for respective mobile platforms, it provides the Device.OS property. Besides, it provides the reusable capsulation of components, which is called ContentView, so that it could be used in another UI like the user control feature in WinForms. When it comes to this feature, it would be better to check it out from Xamarin University Happy Coding!</summary></entry><entry><title type="html">XAML in Xamarin (한글)</title><link href="http://localhost:4000/tech/2017/12/10/xaml-in-xamarin-kr/" rel="alternate" type="text/html" title="XAML in Xamarin (한글)" /><published>2017-12-10T00:00:00+01:00</published><updated>2017-12-10T00:00:00+01:00</updated><id>http://localhost:4000/tech/2017/12/10/xaml-in-xamarin-kr</id><content type="html" xml:base="http://localhost:4000/tech/2017/12/10/xaml-in-xamarin-kr/">&lt;p&gt;
XAML 이란? eXtensible Application Markup Language 의 약자로 Xamarin.Forms 에서는 UI 와 동작을 분리하기 위해 사용되어진다. 화면에 보여지게 될 컨트롤들은 C# 코드단에서도 생성하고 화면에 추가가 가능하지만 이 C# 코드단에는 해당 컨트롤들의 동작을 나타내는 코드들 또한 표시되므로 UI 와 동작이 한 파일안에 존재하게 되어 화면 디자인과 동작 로직을 나눠 작업하기가 어려워진다는 단점이 있다. (물론 동적으로 컨트롤들을 다뤄야할 경우엔 이 경우로 할 수 밖에 없는 경우가 많기는 하다)
&lt;/p&gt;
&lt;p&gt;
현재 많이 사용되어지고 있는 MVC, MVVM, DI 등을 보면 핵심은 각각 역할 또는 관심별로 코드를 분리시켜 부품화하여 하나의 독립적인 부품을 만든 후 다른 부품들과 조립하여 하나의 제품을 만들어내는 일종의 기계 조립과정과도 비슷하다고 할 수 있을 것이다. 얘기가 조금 장황해졌지만 이로 인해 얻는 장점들이 많기 때문에 이렇게 분리를 하므로 UI 와 동작 역시 분리되는 게 맞다는 생각이 들지만 상황에 맞게 잘 쓰면 될 것 같다.
&lt;/p&gt;
&lt;p&gt;
우선, 아래 그림과 같이 UI 단 코드는 아래와 같이 매핑이 된다.
&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;/tech/img/20171210/2.png&quot; alt=&quot;UI 코드와 XAML 코드 매핑&quot; /&gt;
&lt;/a&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;UI 코드와 XAML 코드 매핑&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
XAML 은 WPF, 실버라이트, UWP, Windows Workflow 에서도 쓰이는데 Xamarin.Forms 에서 쓰이는 XAML 은 이들과 같은 문법을 쓰지만 고유의 문법이 존재하므로 같다고 볼 순 없다. 여기선 간단히 XAML 이 저런 데도 쓰이는 기술이다 까지만 알고 넘어가면 될 듯하다.
&lt;/p&gt;
&lt;p&gt;
HTML 태그와 마찬가지로 아래와 같이 각 컨트롤 태그에 Event Handler 를 설정해 줄 수 있다.
&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;/tech/img/20171210/03.png&quot; alt=&quot;XAML 코드에 이벤트 핸들러 추가&quot; /&gt;
&lt;/a&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;XAML 코드에 이벤트 핸들러 추가&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
Xamarin.Forms XAML 에서는 UI 컨트롤들의 값을 유연하게 설정할 수 있도록 Markup Extension 을 지원하고, 모바일 플랫폼별로 설정을 할 수 있도록 Device.OS 프로퍼티를 지원하며, 기존 Winforms 의 User Control 처럼 (ASP.Net MVC 의 경우 PartialView) 특정 UI 컨트롤들을 ContentView 라는 컴포넌트로 만들어 여러 화면에서 재사용 가능하도록 하는 기능도 지원한다. 여기에 대해서는 &lt;a href=&quot;https://university.xamarin.com/welcome&quot; target=&quot;_blank&quot;&gt;Xamarin University&lt;/a&gt; 를 통해 확인해 보는 것이 좋을 듯 하다.
&lt;/p&gt;
&lt;blockquote&gt;&lt;h2 class=&quot;section-heading&quot;&gt;Happy Coding!&lt;/h2&gt;&lt;/blockquote&gt;</content><author><name></name></author><category term="tech" /><category term="Xamarin" /><category term="C#" /><category term="Mobile" /><summary type="html">XAML 이란? eXtensible Application Markup Language 의 약자로 Xamarin.Forms 에서는 UI 와 동작을 분리하기 위해 사용되어진다. 화면에 보여지게 될 컨트롤들은 C# 코드단에서도 생성하고 화면에 추가가 가능하지만 이 C# 코드단에는 해당 컨트롤들의 동작을 나타내는 코드들 또한 표시되므로 UI 와 동작이 한 파일안에 존재하게 되어 화면 디자인과 동작 로직을 나눠 작업하기가 어려워진다는 단점이 있다. (물론 동적으로 컨트롤들을 다뤄야할 경우엔 이 경우로 할 수 밖에 없는 경우가 많기는 하다) 현재 많이 사용되어지고 있는 MVC, MVVM, DI 등을 보면 핵심은 각각 역할 또는 관심별로 코드를 분리시켜 부품화하여 하나의 독립적인 부품을 만든 후 다른 부품들과 조립하여 하나의 제품을 만들어내는 일종의 기계 조립과정과도 비슷하다고 할 수 있을 것이다. 얘기가 조금 장황해졌지만 이로 인해 얻는 장점들이 많기 때문에 이렇게 분리를 하므로 UI 와 동작 역시 분리되는 게 맞다는 생각이 들지만 상황에 맞게 잘 쓰면 될 것 같다. 우선, 아래 그림과 같이 UI 단 코드는 아래와 같이 매핑이 된다. UI 코드와 XAML 코드 매핑 XAML 은 WPF, 실버라이트, UWP, Windows Workflow 에서도 쓰이는데 Xamarin.Forms 에서 쓰이는 XAML 은 이들과 같은 문법을 쓰지만 고유의 문법이 존재하므로 같다고 볼 순 없다. 여기선 간단히 XAML 이 저런 데도 쓰이는 기술이다 까지만 알고 넘어가면 될 듯하다. HTML 태그와 마찬가지로 아래와 같이 각 컨트롤 태그에 Event Handler 를 설정해 줄 수 있다. XAML 코드에 이벤트 핸들러 추가 Xamarin.Forms XAML 에서는 UI 컨트롤들의 값을 유연하게 설정할 수 있도록 Markup Extension 을 지원하고, 모바일 플랫폼별로 설정을 할 수 있도록 Device.OS 프로퍼티를 지원하며, 기존 Winforms 의 User Control 처럼 (ASP.Net MVC 의 경우 PartialView) 특정 UI 컨트롤들을 ContentView 라는 컴포넌트로 만들어 여러 화면에서 재사용 가능하도록 하는 기능도 지원한다. 여기에 대해서는 Xamarin University 를 통해 확인해 보는 것이 좋을 듯 하다. Happy Coding!</summary></entry></feed>