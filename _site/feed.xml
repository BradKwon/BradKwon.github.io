<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="https://bradkwon.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://bradkwon.github.io/" rel="alternate" type="text/html" /><updated>2017-12-10T17:43:28+01:00</updated><id>https://bradkwon.github.io/</id><title type="html">Brad Kwon</title><subtitle>Brad Kwon's personal website. The introduction, the portfolio and blogs about programming and life of Brad Hyeongu Kwon.</subtitle><entry><title type="html">Xamarin Code Sharing</title><link href="https://bradkwon.github.io/tech/2017/12/01/xamarin-code-sharing/" rel="alternate" type="text/html" title="Xamarin Code Sharing" /><published>2017-12-01T00:00:00+01:00</published><updated>2017-12-01T00:00:00+01:00</updated><id>https://bradkwon.github.io/tech/2017/12/01/xamarin-code-sharing</id><content type="html" xml:base="https://bradkwon.github.io/tech/2017/12/01/xamarin-code-sharing/">&lt;blockquote&gt;
&lt;a href=&quot;/tech/2017/12/01/xamarin-code-sharing-kr/&quot;&gt;Korean Version&lt;/a&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;u&gt;&lt;small&gt;
Please let me know if there is any incorrect information because this is what I summarized what I understood.
&lt;/small&gt;&lt;/u&gt;
&lt;/p&gt;
&lt;p&gt;
The aim of Xamain is to write a function once, run on every platform. However, it seems impossible pragmatically.
Therefore, this code sharing approach came out to reuse common code except for platform-specific code.
There are two ways in this approach. One is shared projects and the other is shared compiled binaries.
&lt;/p&gt;
&lt;p&gt;
I quoted the part which explains the reason why you use or consider Xamarin from the lecture in Xamarin University.
&lt;/p&gt;
&lt;blockquote&gt;
One of the reasons you are probably either using or evaluating Xamarin is because it allows you to write your core logic 
once in a familiar .NET language and then share it across all the popular mobile platforms. This means we fix bugs once, 
implement new features once and reduce our maintenance and testable surfaces because we have less code to maintain
&lt;/blockquote&gt;
&lt;p&gt;
I think it would be better to watch lectures in &lt;a href=&quot;https://university.xamarin.com/welcome&quot; target=&quot;_blank&quot;&gt;Xamarin University&lt;/a&gt; and build up exercise projects in them so I am going to sum up basic concepts here.
&lt;/p&gt;
&lt;p&gt;
Shared projects is to create an additional project in the solution and, in turn, to have other mobile platform projects, such as android, iOS, windows phone and universal windows app (UWP), refer to it. In the conventional way, this kind of project can be compied as binary file and being refered to other projects in the form of DLL, however this shared project is included to other mobile platform projects in the form of code and compiled together at compile time like partial feature in C#. The include feature in web development.
I captured the picture that depicts well of this concept.
&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;/tech/img/20171201/3.png&quot; alt=&quot;Concept of shared projects&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
Shared compiled binaries is to refer as a DLL like the conventional way.
There are also two approaches. One is to create portable class library (PCL) project and refer it.
In order to run on multiple platforms, you have to configure which platform are you going to run in the profile of this PCL project.
For example, such as .Net Framework 4.5, Windows Universal 10.0, Windows Phone 8.1, Xamarin.Android, Xamarin.iOS, Xamarin.iOS (Classic).
&lt;/p&gt;
&lt;p&gt;
The other is to create .Net Standard Library project and refer it.
This is the .Net API library that can be commonly used in every .Net platform and it has rolled out up to version 2.0 from initial version 1.0. The lower version you choose, the less APIs you can use. You can choose which version you want to set in the project property.
&lt;/p&gt;
&lt;p&gt;
As these two approaches hasa pros and cons respectively, you can choose either one that fits on your development environment.
Xamarin University recommends to use shared projects if the size of your dev team is small and should be in the same solution with other projects and to use shared compiled binaries if the size of dev team is big or should be controlled in the form of component.

I brought the summaries of each approach's pros and cons below.
&lt;/p&gt;
&lt;p&gt;
    &lt;span&gt;&lt;b&gt;Shared Projects&lt;/b&gt;&lt;/span&gt;
    &lt;table class=&quot;table table-bordered table-condensed&quot;&gt;
    &lt;thead&gt;
        &lt;th width=&quot;50%&quot; style=&quot;text-align:center;&quot;&gt;Pros&lt;/th&gt;
        &lt;th width=&quot;50%&quot; style=&quot;text-align:center;&quot;&gt;Cons&lt;/th&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
    &lt;tr&gt;
        &lt;td&gt;All APIs available&lt;/td&gt;
        &lt;td&gt;Can lead to spaghetti code&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Platform-specific logic can be added directly&lt;/td&gt;
        &lt;td&gt;Difficult to unit test conditional code&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;All file types can be shared&lt;/td&gt;
        &lt;td&gt;Must be shipped in source form&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Smaller package sizes/platform-specific optimizations&lt;/td&gt;
        &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/p&gt;
&lt;p&gt;
    &lt;span&gt;&lt;b&gt;Shared Compiled Binaries&lt;/b&gt;&lt;/span&gt;
    &lt;table class=&quot;table table-bordered table-condensed&quot;&gt;
    &lt;thead&gt;
        &lt;th width=&quot;50%&quot; style=&quot;text-align:center;&quot;&gt;Pros&lt;/th&gt;
        &lt;th width=&quot;50%&quot; style=&quot;text-align:center;&quot;&gt;Cons&lt;/th&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
    &lt;tr&gt;
        &lt;td&gt;Enforces architectural design&lt;/td&gt;
        &lt;td&gt;Limited APIs available&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Can be unit tested separately&lt;/td&gt;
        &lt;td&gt;Difficult to share non-code files&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Can be shipped in binary form (NuGet)&lt;/td&gt;
        &lt;td&gt;Limited to target platforms or APIs&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;/td&gt;
        &lt;td&gt;Requires more work to integrate platform-specific code&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/p&gt;
&lt;blockquote&gt;&lt;h2 class=&quot;section-heading&quot;&gt;Happy Coding!&lt;/h2&gt;&lt;/blockquote&gt;</content><author><name></name></author><category term="Xamarin" /><category term="Visual Studio" /><category term="C#" /><category term="Mobile" /><summary type="html">Korean Version Please let me know if there is any incorrect information because this is what I summarized what I understood. The aim of Xamain is to write a function once, run on every platform. However, it seems impossible pragmatically. Therefore, this code sharing approach came out to reuse common code except for platform-specific code. There are two ways in this approach. One is shared projects and the other is shared compiled binaries. I quoted the part which explains the reason why you use or consider Xamarin from the lecture in Xamarin University. One of the reasons you are probably either using or evaluating Xamarin is because it allows you to write your core logic once in a familiar .NET language and then share it across all the popular mobile platforms. This means we fix bugs once, implement new features once and reduce our maintenance and testable surfaces because we have less code to maintain I think it would be better to watch lectures in Xamarin University and build up exercise projects in them so I am going to sum up basic concepts here. Shared projects is to create an additional project in the solution and, in turn, to have other mobile platform projects, such as android, iOS, windows phone and universal windows app (UWP), refer to it. In the conventional way, this kind of project can be compied as binary file and being refered to other projects in the form of DLL, however this shared project is included to other mobile platform projects in the form of code and compiled together at compile time like partial feature in C#. The include feature in web development. I captured the picture that depicts well of this concept. Shared compiled binaries is to refer as a DLL like the conventional way. There are also two approaches. One is to create portable class library (PCL) project and refer it. In order to run on multiple platforms, you have to configure which platform are you going to run in the profile of this PCL project. For example, such as .Net Framework 4.5, Windows Universal 10.0, Windows Phone 8.1, Xamarin.Android, Xamarin.iOS, Xamarin.iOS (Classic). The other is to create .Net Standard Library project and refer it. This is the .Net API library that can be commonly used in every .Net platform and it has rolled out up to version 2.0 from initial version 1.0. The lower version you choose, the less APIs you can use. You can choose which version you want to set in the project property. As these two approaches hasa pros and cons respectively, you can choose either one that fits on your development environment. Xamarin University recommends to use shared projects if the size of your dev team is small and should be in the same solution with other projects and to use shared compiled binaries if the size of dev team is big or should be controlled in the form of component.</summary></entry><entry><title type="html">Xamarin 코드 공유</title><link href="https://bradkwon.github.io/tech/2017/12/01/xamarin-code-sharing-kr/" rel="alternate" type="text/html" title="Xamarin 코드 공유" /><published>2017-12-01T00:00:00+01:00</published><updated>2017-12-01T00:00:00+01:00</updated><id>https://bradkwon.github.io/tech/2017/12/01/xamarin-code-sharing-kr</id><content type="html" xml:base="https://bradkwon.github.io/tech/2017/12/01/xamarin-code-sharing-kr/">&lt;blockquote&gt;
&lt;a href=&quot;/tech/2017/12/01/xamarin-code-sharing/&quot;&gt;영문 버전&lt;/a&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;u&gt;&lt;small&gt;이 글은 저도 Xamarin 을 배우는 입장에서 공부한 내용을 정리해 놓은 글이기 때문에 혹시 틀린 내용이 있으면 지적해 주시면 감사하겠습니다.&lt;/small&gt;&lt;/u&gt;
&lt;/p&gt;
&lt;p&gt;
Xamarin 이 지향하는 게 동일한 기능을 안드로이드, 아이폰, 윈도우폰과 같은 각각의 플랫폼에 맞게 다시 작성하는 게 아닌 
한 번 작성된 코드로 위 세 플랫폼 모두에서 동작할 수 있도록 하는 것이지만 현실적으로는 이게 불가능하다. 
그래서 나오게 된 솔루션이 플랫폼 제한적인 코드를 제외한 공통적인 코드들을 재사용하기 위한 방법으로 나온 Code Sharing 방식이다. 
여기에는 크게 두 가지 방식이 있는데 첫째는 Shared Projects 이고 다른 하나는 Shared Compiled Binaries 이다. 
&lt;/p&gt;
&lt;p&gt;
Xamarin University 강의 중 Xamarin 을 사용하는 이유에 대한 설명이 있어 옮겨와 번역을 해 보았다.
&lt;/p&gt;
&lt;blockquote&gt;
One of the reasons you are probably either using or evaluating Xamarin is because it allows you to write your core logic 
once in a familiar .NET language and then share it across all the popular mobile platforms. This means we fix bugs once, 
implement new features once and reduce our maintenance and testable surfaces because we have less code to maintain
&lt;/blockquote&gt;
&lt;blockquote&gt;
아마 당신이 Xamarin 을 사용하거나 고려하고 있는 이유들 중 하나는 핵심 로직을 익숙한 .Net 언어로 한 번만 작성한 뒤 주요 모바일 플랫폼들에서 
사용할 수 있다는 것일 것이다. 이 말은 버그를 한 번만 고치면 되고, 새로운 기능을 한 번만 만들면 되므로 적은 양의 코드를 가지게 되어 유지보수 
및 테스트할 부분이 줄어든다는 것이다.
&lt;/blockquote&gt;
&lt;p&gt;
구체적인 구현 방법은 &lt;a href=&quot;https://university.xamarin.com/welcome&quot; target=&quot;_blank&quot;&gt;Xamarin University&lt;/a&gt;에 가면 
따라해 볼 수 있는 강의가 있으니 직접 강의를 보고 구현해 보는게 좋을 듯 하여 여기서는 간단히 개념만 정리해 보려고 한다.
&lt;/p&gt;
&lt;p&gt;
Shared Projects 방식은, 별도의 Shared Project 를 하나 만들어서 안드로이드나 아이폰, 그리고 윈도우폰과 Universal Windows App(UWP) 
프로젝트들에 프로젝트 참조하여 사용하는 방식이다. 보통은 이렇게 별도의 프로젝트를 만들어서 다른 프로젝트에 참조를 하게 되면 이미 컴파일된 
바이너리 파일인 DLL 라이브러리로 참조가 되어 사용할 수 있는데 반해, 이 Shared Project 는 C# 의 Partial 기능처럼 컴파일 시점에 각각의 
참조된 플랫폼 프로젝트에 Shared Project 소스가 포함되서 컴파일이 된다는 점이다. 웹으로 치면 Include 와 동일하다. 
간단한 그림을 강의에서 캡쳐해서 나타내 보았다.
&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;/tech/img/20171201/3.png&quot; alt=&quot;Shared 프로젝트 개념&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
Shared Compiled Binaries 방식은, 기존 방식처럼 별도의 라이브러리 프로젝트를 DLL 로 참조하는 것이다. 
여기에는 두 가지 방법이 있는데 첫째는, Portable Class Library (PCL) 프로젝트를 만들어 바이너리로 참조하게 하는 것이다. 
각각 플랫폼들에서 공통적으로 실행되기 때문에 실행될 플랫폼들의 프로파일을 설정해 줘야 한다. 
예를 들면, .Net Framework 4.5, Windows Universal 10.0, Windows Phone 8.1, Xamarin.Android, Xamarin.iOS, Xamarin.iOS (Classic) 과 
같은 것들을 말이다.
&lt;/p&gt;
&lt;p&gt;
두번째는, .Net Standard Library 프로젝트를 만들어 바이너리로 참조하게 하는 것이다. 이건 모든 닷넷 플랫폼에서 공통적으로 사용할 수 있는 .Net API 라이브러리인데 1.0, 1.1, 1.2 … 현재 2.0 까지 버전이 나왔고 버전이 낮아질수록 사용할 수 있는 API 가 적어진다. 프로젝트 속성에서 버전을 선택할 수 있다. 
&lt;/p&gt;
&lt;p&gt;
두 가지 방식 모두 장단점이 있기 때문에 개발환경에 맞게 선택해서 사용하면 되며, Shared Projects 방식은 같은 솔루션에 포함되어야 하기에 작은 규모의 앱이나 개발팀에 적합하며, 규모가 크거나 컴포넌트 형식으로 관리되어야 한다면 Shared Compiled Libraries 방식이 적합할 것이다.

역시 Xamarin University 강의에 각각 방식의 장단점을 정리해 놓은게 있어 옮겨와 번역을 해 보았다.
&lt;/p&gt;
&lt;p&gt;
    &lt;span&gt;&lt;b&gt;Shared Projects&lt;/b&gt;&lt;/span&gt;
    &lt;table class=&quot;table table-bordered table-condensed&quot;&gt;
    &lt;thead&gt;
        &lt;th width=&quot;50%&quot; style=&quot;text-align:center;&quot;&gt;Pros&lt;/th&gt;
        &lt;th width=&quot;50%&quot; style=&quot;text-align:center;&quot;&gt;Cons&lt;/th&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
    &lt;tr&gt;
        &lt;td&gt;모든 API 사용가능&lt;/td&gt;
        &lt;td&gt;스파게티 소스가 될 가능성&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;플랫폼 제한적인 로직 직접 추가 가능&lt;/td&gt;
        &lt;td&gt;플랫폼 제한적인 로직 유닛 테스팅 어려움&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;모든 파일 종류 공유 가능&lt;/td&gt;
        &lt;td&gt;반드시 소스 형식으로 제공되어야 함&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;작은 패키지 크기/플랫폼별 최적화&lt;/td&gt;
        &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/p&gt;
&lt;p&gt;
    &lt;span&gt;&lt;b&gt;Shared Compiled Binaries&lt;/b&gt;&lt;/span&gt;
    &lt;table class=&quot;table table-bordered table-condensed&quot;&gt;
    &lt;thead&gt;
        &lt;th width=&quot;50%&quot; style=&quot;text-align:center;&quot;&gt;Pros&lt;/th&gt;
        &lt;th width=&quot;50%&quot; style=&quot;text-align:center;&quot;&gt;Cons&lt;/th&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
    &lt;tr&gt;
        &lt;td&gt;구조적 디자인 강제&lt;/td&gt;
        &lt;td&gt;제한적인 API&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;독립적으로 유닛 테스팅 가능&lt;/td&gt;
        &lt;td&gt;코드성 파일외 공유의 어려움&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;바이너리 형식으로 배포 가능 (NuGet)&lt;/td&gt;
        &lt;td&gt;제한된 타겟 플랫폼 또는 API&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;/td&gt;
        &lt;td&gt;플랫폼 제한적인 코드 통합에 추가 작업 필요&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/p&gt;
&lt;blockquote&gt;&lt;h2 class=&quot;section-heading&quot;&gt;Happy Coding!&lt;/h2&gt;&lt;/blockquote&gt;</content><author><name></name></author><category term="Xamarin" /><category term="Visual Studio" /><category term="C#" /><category term="Mobile" /><summary type="html">영문 버전 이 글은 저도 Xamarin 을 배우는 입장에서 공부한 내용을 정리해 놓은 글이기 때문에 혹시 틀린 내용이 있으면 지적해 주시면 감사하겠습니다. Xamarin 이 지향하는 게 동일한 기능을 안드로이드, 아이폰, 윈도우폰과 같은 각각의 플랫폼에 맞게 다시 작성하는 게 아닌 한 번 작성된 코드로 위 세 플랫폼 모두에서 동작할 수 있도록 하는 것이지만 현실적으로는 이게 불가능하다. 그래서 나오게 된 솔루션이 플랫폼 제한적인 코드를 제외한 공통적인 코드들을 재사용하기 위한 방법으로 나온 Code Sharing 방식이다. 여기에는 크게 두 가지 방식이 있는데 첫째는 Shared Projects 이고 다른 하나는 Shared Compiled Binaries 이다. Xamarin University 강의 중 Xamarin 을 사용하는 이유에 대한 설명이 있어 옮겨와 번역을 해 보았다. One of the reasons you are probably either using or evaluating Xamarin is because it allows you to write your core logic once in a familiar .NET language and then share it across all the popular mobile platforms. This means we fix bugs once, implement new features once and reduce our maintenance and testable surfaces because we have less code to maintain 아마 당신이 Xamarin 을 사용하거나 고려하고 있는 이유들 중 하나는 핵심 로직을 익숙한 .Net 언어로 한 번만 작성한 뒤 주요 모바일 플랫폼들에서 사용할 수 있다는 것일 것이다. 이 말은 버그를 한 번만 고치면 되고, 새로운 기능을 한 번만 만들면 되므로 적은 양의 코드를 가지게 되어 유지보수 및 테스트할 부분이 줄어든다는 것이다. 구체적인 구현 방법은 Xamarin University에 가면 따라해 볼 수 있는 강의가 있으니 직접 강의를 보고 구현해 보는게 좋을 듯 하여 여기서는 간단히 개념만 정리해 보려고 한다. Shared Projects 방식은, 별도의 Shared Project 를 하나 만들어서 안드로이드나 아이폰, 그리고 윈도우폰과 Universal Windows App(UWP) 프로젝트들에 프로젝트 참조하여 사용하는 방식이다. 보통은 이렇게 별도의 프로젝트를 만들어서 다른 프로젝트에 참조를 하게 되면 이미 컴파일된 바이너리 파일인 DLL 라이브러리로 참조가 되어 사용할 수 있는데 반해, 이 Shared Project 는 C# 의 Partial 기능처럼 컴파일 시점에 각각의 참조된 플랫폼 프로젝트에 Shared Project 소스가 포함되서 컴파일이 된다는 점이다. 웹으로 치면 Include 와 동일하다. 간단한 그림을 강의에서 캡쳐해서 나타내 보았다. Shared Compiled Binaries 방식은, 기존 방식처럼 별도의 라이브러리 프로젝트를 DLL 로 참조하는 것이다. 여기에는 두 가지 방법이 있는데 첫째는, Portable Class Library (PCL) 프로젝트를 만들어 바이너리로 참조하게 하는 것이다. 각각 플랫폼들에서 공통적으로 실행되기 때문에 실행될 플랫폼들의 프로파일을 설정해 줘야 한다. 예를 들면, .Net Framework 4.5, Windows Universal 10.0, Windows Phone 8.1, Xamarin.Android, Xamarin.iOS, Xamarin.iOS (Classic) 과 같은 것들을 말이다. 두번째는, .Net Standard Library 프로젝트를 만들어 바이너리로 참조하게 하는 것이다. 이건 모든 닷넷 플랫폼에서 공통적으로 사용할 수 있는 .Net API 라이브러리인데 1.0, 1.1, 1.2 … 현재 2.0 까지 버전이 나왔고 버전이 낮아질수록 사용할 수 있는 API 가 적어진다. 프로젝트 속성에서 버전을 선택할 수 있다. 두 가지 방식 모두 장단점이 있기 때문에 개발환경에 맞게 선택해서 사용하면 되며, Shared Projects 방식은 같은 솔루션에 포함되어야 하기에 작은 규모의 앱이나 개발팀에 적합하며, 규모가 크거나 컴포넌트 형식으로 관리되어야 한다면 Shared Compiled Libraries 방식이 적합할 것이다.</summary></entry><entry><title type="html">Xamarin Android Emulator Setup in Visual Studio 2017</title><link href="https://bradkwon.github.io/tech/2017/11/15/xamarin-setup/" rel="alternate" type="text/html" title="Xamarin Android Emulator Setup in Visual Studio 2017" /><published>2017-11-15T00:00:00+01:00</published><updated>2017-11-15T00:00:00+01:00</updated><id>https://bradkwon.github.io/tech/2017/11/15/xamarin-setup</id><content type="html" xml:base="https://bradkwon.github.io/tech/2017/11/15/xamarin-setup/">&lt;blockquote&gt;
&lt;a href=&quot;/tech/2017/11/15/xamarin-setup-kr/&quot;&gt;Korean Version&lt;/a&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I've recently started to learn Xamarin to build any mobile app with C# because I've mainly used C# for programming. 
The concept of Xamarin which is write-once, run everywhere seemed quite attractive so I decided to learn it.  
&lt;/p&gt;
&lt;p&gt;
What I had to do at first is to set up Xamarin development environment. 
I chose a Visual Studio 2017 community version. 
For iOS deployment, I have to use either an iMac or a Macbook. 
As I only have Windows environment, so I decided to go with android first and try out the &lt;a href=&quot;https://www.xamarin.com/live&quot; target=&quot;_blank&quot;&gt;Xamarin Live Player&lt;/a&gt; app for iOS deployment. 
The live player function enables developers to deploy iOS apps to their actual iPhones via the live player app.
&lt;/p&gt;
&lt;p&gt;
To install the Visual Studio 2017 was easy as well as Xamarin development tools. 
I could choose whatever tools I want to install on the workload while installing.
&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;https://developer.xamarin.com/guides/cross-platform/troubleshooting/questions/visualstudio-2017-rc/Images/install1-orig.png&quot; alt=&quot;Visual Studio Installer Workloads View&quot; /&gt;
&lt;/a&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;Visual Studio Installer Workloads View&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
The problem was when I tried to deploy an Android project to an emulator. 
I found out that there are two types of emulators. One is using Android SDK and another is using Visual Studio Emulator for Android. 
After taking a closer look on them, I found out that Visual Studio Emulator for Android is much faster than Android SDK 
so I installed it through Visual Studio installer again. 
You can select it to install in the Individual components &amp;gt; Emulators menu.
&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;https://social.msdn.microsoft.com/Forums/getfile/1012756&quot; alt=&quot;Visual Studio Installer Individual components View&quot; /&gt;
&lt;/a&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;Choose Visual Studio Emulator for Android under Emulators if it is not selected.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
I installed that emulator on my computer and tried to deploy again. 
But this time, I couldn’t see anything running on the emulator although everything looked fine.
&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;/tech/img/20171115/xamarin-android-emulator-setup1.jpg&quot; alt=&quot;Debugging running view&quot; /&gt;
&lt;/a&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;Everything seems fine.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
So I googled what went wrong and finally reached this page.
&lt;/p&gt;
&lt;blockquote&gt;&lt;a href=&quot;https://forums.xamarin.com/discussion/62307/xamarin-android-projects-failed-to-deploy-in-visual-studio-emulator-for-android&quot; target=&quot;_blank&quot;&gt;https://forums.xamarin.com/discussion/62307/xamarin-android-projects-failed-to-deploy-in-visual-studio-emulator-for-android&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;
My case came under both the CPU compatibility and the registry.
&lt;/p&gt;
&lt;p&gt;
My CPU was Intel i7-6600U and its code name is SkyLake and this CPU has an issue with Hyper-V that the Visual Studio Emulator for Android depends on. In order to sort this out, I followed this step.
&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;Open the Hyper-V Manager and go to settings of the virtual device.&lt;/li&gt;
    &lt;a class=&quot;popupImg&quot;&gt;
        &lt;img src=&quot;/tech/img/20171115/xamarin-android-emulator-setup2.jpg&quot; alt=&quot;Hyper-V Manager main view&quot; /&gt;
    &lt;/a&gt;
    &lt;span class=&quot;caption text-muted&quot;&gt;Right-click on the emulator you want to set up and choose settings.&lt;/span&gt;
    &lt;li&gt;Check off “Migrate to a physical computer with a different processor version” in the Processor &amp;gt; Compatibility menu.&lt;/li&gt;
    &lt;a class=&quot;popupImg&quot;&gt;
        &lt;img src=&quot;/tech/img/20171115/xamarin-android-emulator-setup3.jpg&quot; alt=&quot;Hyper-V Manager processor compatibility configuration view&quot; /&gt;
    &lt;/a&gt;
&lt;/ol&gt;
&lt;p&gt;
Secondly, for the registry for Android SDK Tools path, I created a new “Android SDK Tools” key under &lt;blockquote&gt;HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\&lt;/blockquote&gt; because there wasn’t existing key like others. Then I added a string value with “Path” for name and the Android SDK full path on my computer for data. 
I could get the Android SDK full path from &lt;blockquote&gt;Visual Studio &amp;gt; Tools &amp;gt; Options &amp;gt; Xamarin &amp;gt; Android Settings &amp;gt; Android SDK Location&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;/tech/img/20171115/xamarin-android-emulator-setup4.jpg&quot; alt=&quot;Visual Studio tools options view&quot; /&gt;
&lt;/a&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;Copy and paste it to the registry.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
Eventually, I could see something different on the output window after executing debugging.
&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;/tech/img/20171115/xamarin-android-emulator-setup5.jpg&quot; alt=&quot;Debugging running view2&quot; /&gt;
&lt;/a&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;Deployment Success!!&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;h2 class=&quot;section-heading&quot;&gt;Happy Coding!&lt;/h2&gt;&lt;/blockquote&gt;</content><author><name></name></author><category term="Xamarin" /><category term="Visual Studio" /><category term="C#" /><category term="Mobile" /><category term="Android" /><summary type="html">Korean Version I've recently started to learn Xamarin to build any mobile app with C# because I've mainly used C# for programming. The concept of Xamarin which is write-once, run everywhere seemed quite attractive so I decided to learn it. What I had to do at first is to set up Xamarin development environment. I chose a Visual Studio 2017 community version. For iOS deployment, I have to use either an iMac or a Macbook. As I only have Windows environment, so I decided to go with android first and try out the Xamarin Live Player app for iOS deployment. The live player function enables developers to deploy iOS apps to their actual iPhones via the live player app. To install the Visual Studio 2017 was easy as well as Xamarin development tools. I could choose whatever tools I want to install on the workload while installing. Visual Studio Installer Workloads View The problem was when I tried to deploy an Android project to an emulator. I found out that there are two types of emulators. One is using Android SDK and another is using Visual Studio Emulator for Android. After taking a closer look on them, I found out that Visual Studio Emulator for Android is much faster than Android SDK so I installed it through Visual Studio installer again. You can select it to install in the Individual components &amp;gt; Emulators menu. Choose Visual Studio Emulator for Android under Emulators if it is not selected. I installed that emulator on my computer and tried to deploy again. But this time, I couldn’t see anything running on the emulator although everything looked fine. Everything seems fine. So I googled what went wrong and finally reached this page. https://forums.xamarin.com/discussion/62307/xamarin-android-projects-failed-to-deploy-in-visual-studio-emulator-for-android My case came under both the CPU compatibility and the registry. My CPU was Intel i7-6600U and its code name is SkyLake and this CPU has an issue with Hyper-V that the Visual Studio Emulator for Android depends on. In order to sort this out, I followed this step. Open the Hyper-V Manager and go to settings of the virtual device. Right-click on the emulator you want to set up and choose settings. Check off “Migrate to a physical computer with a different processor version” in the Processor &amp;gt; Compatibility menu. Secondly, for the registry for Android SDK Tools path, I created a new “Android SDK Tools” key under HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\ because there wasn’t existing key like others. Then I added a string value with “Path” for name and the Android SDK full path on my computer for data. I could get the Android SDK full path from Visual Studio &amp;gt; Tools &amp;gt; Options &amp;gt; Xamarin &amp;gt; Android Settings &amp;gt; Android SDK Location Copy and paste it to the registry. Eventually, I could see something different on the output window after executing debugging. Deployment Success!! Happy Coding!</summary></entry><entry><title type="html">Visual Studio 2017 에서 Xamarin 안드로이드 에뮬레이터 설치</title><link href="https://bradkwon.github.io/tech/2017/11/15/xamarin-setup-kr/" rel="alternate" type="text/html" title="Visual Studio 2017 에서 Xamarin 안드로이드 에뮬레이터 설치" /><published>2017-11-15T00:00:00+01:00</published><updated>2017-11-15T00:00:00+01:00</updated><id>https://bradkwon.github.io/tech/2017/11/15/xamarin-setup-kr</id><content type="html" xml:base="https://bradkwon.github.io/tech/2017/11/15/xamarin-setup-kr/">&lt;blockquote&gt;
&lt;a href=&quot;/tech/2017/11/15/xamarin-setup/&quot;&gt;영문 버전&lt;/a&gt;
&lt;/blockquote&gt;
&lt;p&gt;
C# 을 주로 사용해 왔기 때문에 C# 을 이용해 모바일 앱 개발을 할 수 있게 해 주는 Xamarin 을 최근에 배우기 시작했다. 
Xamarin 의 컨셉인 한 번의 작성으로 모든 곳에서 작동되게 한다. 가 꽤 매력적으로 들렸기 때문이다.
&lt;/p&gt;
&lt;p&gt;
우선 맨 처음으로 해야 했던 건 Xamain 개발 환경을 구축하는 것이었다. 
Visual Studio 2017 커뮤니티 버전을 사용하기로 했는데 iOS 버전을 배포하기 위해서는 맥이나 맥북을 사용해야 한다고 한다. 
나는 윈도우 PC 밖에 없기 때문에 우선 안드로이드 버전만 해보기로 하고 iOS 버전은 
&lt;a href=&quot;https://www.xamarin.com/live&quot; target=&quot;_blank&quot;&gt;Xamarin Live Player&lt;/a&gt; 앱으로 테스트 하기로 했다. 
이 Live Player 앱은 실제 아이폰에 이 앱을 설치하면 개발 중인 iOS 버전 앱을 배포할 수 있게 해주는 기능을 가진 앱이다.
&lt;/p&gt;
&lt;p&gt;
Visual Studio 2017 과 Xamarin 개발 툴은 설치가 간단한다. 
아래와 같이 Visual Studio 2017 설치 시에 내가 설치하고 싶은 툴들을 선택하여 설치하면 된다.
&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;https://developer.xamarin.com/guides/cross-platform/troubleshooting/questions/visualstudio-2017-rc/Images/install1-orig.png&quot; alt=&quot;Visual Studio 2017 인스톨러 워크로드 화면&quot; /&gt;
&lt;/a&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;Visual Studio 2017 인스톨러 워크로드 화면&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
문제는 안드로이드 프로젝트를 에뮬레이터에 배포할 때였다. 
이를 위해 두 가지 종류의 에뮬레이터가 있다는 것 알았는데, 
하나는 기존 안드로이드 개발할 때 사용하는 안드로이드 SDK 용 에뮬레이터이고 
다른 하나는 Visual Studio 에서 제공하는 Visual Studio Emulator for Android 였다. 
한 번 살펴보니 Visual Studio Emulator for Android 가 훨씬 빠르다고 하여 이를 설치하기로 했다. 
이 에뮬레이터는 아래와 같이 Visual Studio 2017 설치시 개별 컴포넌트 탭의 에뮬레이터 항목에서 선택 설치 가능하다.
&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;https://social.msdn.microsoft.com/Forums/getfile/1012756&quot; alt=&quot;Visual Studio 인스톨러 개별 컴포넌트 화면&quot; /&gt;
&lt;/a&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;에뮬레이터 밑에 Visual Studio Emulator for Android 를 선택&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
설치 후 다시 안드로이드 버전을 배포해 보는데 되질 않았다. 
이번에는 특별한 문제가 없어보이는데도 에뮬레이터에 앱이 실행되지 않았다.
&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;/tech/img/20171115/xamarin-android-emulator-setup1.jpg&quot; alt=&quot;디버깅 실행 화면&quot; /&gt;
&lt;/a&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;문제가 없어 보인다.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
그래서 뭐가 문제인지 찾다가 다음 링크에서 해결할 수 있었다.
&lt;/p&gt;
&lt;blockquote&gt;&lt;a href=&quot;https://forums.xamarin.com/discussion/62307/xamarin-android-projects-failed-to-deploy-in-visual-studio-emulator-for-android&quot; target=&quot;_blank&quot;&gt;https://forums.xamarin.com/discussion/62307/xamarin-android-projects-failed-to-deploy-in-visual-studio-emulator-for-android&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;
내 경우는 CPU 호환성과 레지스트리 둘 다 문제였다.
&lt;/p&gt;
&lt;p&gt;
내 CPU 는 인텔 i7-6600U 이고 이것의 코드명이 스카이레이크인데 이 코드명을 가진 CPU 들이 
Visual Studio Emulator for Android 에서 사용하는 Hyper-V 라는 기능과 문제가 있었던 것이다. 
이 문제는 다음과 같은 방법으로 해결되었다.
&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;Hyper-V 매니저를 열고 가상 머신의 설정 화면을 연다.&lt;/li&gt;
    &lt;a class=&quot;popupImg&quot;&gt;
        &lt;img src=&quot;/tech/img/20171115/xamarin-android-emulator-setup2.jpg&quot; alt=&quot;Hyper-V 매니저 메인 화면&quot; /&gt;
    &lt;/a&gt;
    &lt;span class=&quot;caption text-muted&quot;&gt;설정을 변경할 에뮬레이터를 선택 후 마우스 오른쪽 버튼 클릭하여 설정 선택&lt;/span&gt;
    &lt;li&gt;프로세서 &amp;gt; 호환성 메뉴에서 Migrate to a physical computer with a different processor version 항목 체크를 해제한다.&lt;/li&gt;
    &lt;a class=&quot;popupImg&quot;&gt;
        &lt;img src=&quot;/tech/img/20171115/xamarin-android-emulator-setup3.jpg&quot; alt=&quot;Hyper-V 매니저 프로세서 호환성 설정 화면&quot; /&gt;
    &lt;/a&gt;
&lt;/ol&gt;
&lt;p&gt;
그리고 두번째 문제인 안드로이드 SDK 툴 경로 레지스트리 문제는 다음과 같이 레지스트리에 Android SDK Tools 키를 추가해줬다.
&lt;blockquote&gt;HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\&lt;/blockquote&gt; 
다른 사람들하곤 다르게 해당 키가 없었기 때문에 “Path” 라는 항목을 추가하고 안드로이드 SDK Tools 전체 경로를 값으로 설정해줬다. 
이 안드로이드 SDK Tools 전체 경로는 아래에서 찾을 수 있다.
&lt;blockquote&gt;Visual Studio &amp;gt; 툴 &amp;gt; 옵션 &amp;gt; Xamarin &amp;gt; 안드로이드 설정 &amp;gt; 안드로이드 SDK 경로&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;/tech/img/20171115/xamarin-android-emulator-setup4.jpg&quot; alt=&quot;Visual Studio 툴 옵션 화면&quot; /&gt;
&lt;/a&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;레지스트리에 복사 붙여넣기&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
마침내, 디버깅 했을 때 output 윈도우에 다른게 보였고 에뮬레이터에서 앱이 정상적으로 실행되었다.
&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;popupImg&quot;&gt;
    &lt;img src=&quot;/tech/img/20171115/xamarin-android-emulator-setup5.jpg&quot; alt=&quot;디버깅 실행 화면2&quot; /&gt;
&lt;/a&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;배포 성공!!&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;h2 class=&quot;section-heading&quot;&gt;Happy Coding!&lt;/h2&gt;&lt;/blockquote&gt;</content><author><name></name></author><category term="Xamarin" /><category term="Visual Studio" /><category term="C#" /><category term="Mobile" /><category term="Android" /><summary type="html">영문 버전 C# 을 주로 사용해 왔기 때문에 C# 을 이용해 모바일 앱 개발을 할 수 있게 해 주는 Xamarin 을 최근에 배우기 시작했다. Xamarin 의 컨셉인 한 번의 작성으로 모든 곳에서 작동되게 한다. 가 꽤 매력적으로 들렸기 때문이다. 우선 맨 처음으로 해야 했던 건 Xamain 개발 환경을 구축하는 것이었다. Visual Studio 2017 커뮤니티 버전을 사용하기로 했는데 iOS 버전을 배포하기 위해서는 맥이나 맥북을 사용해야 한다고 한다. 나는 윈도우 PC 밖에 없기 때문에 우선 안드로이드 버전만 해보기로 하고 iOS 버전은 Xamarin Live Player 앱으로 테스트 하기로 했다. 이 Live Player 앱은 실제 아이폰에 이 앱을 설치하면 개발 중인 iOS 버전 앱을 배포할 수 있게 해주는 기능을 가진 앱이다. Visual Studio 2017 과 Xamarin 개발 툴은 설치가 간단한다. 아래와 같이 Visual Studio 2017 설치 시에 내가 설치하고 싶은 툴들을 선택하여 설치하면 된다. Visual Studio 2017 인스톨러 워크로드 화면 문제는 안드로이드 프로젝트를 에뮬레이터에 배포할 때였다. 이를 위해 두 가지 종류의 에뮬레이터가 있다는 것 알았는데, 하나는 기존 안드로이드 개발할 때 사용하는 안드로이드 SDK 용 에뮬레이터이고 다른 하나는 Visual Studio 에서 제공하는 Visual Studio Emulator for Android 였다. 한 번 살펴보니 Visual Studio Emulator for Android 가 훨씬 빠르다고 하여 이를 설치하기로 했다. 이 에뮬레이터는 아래와 같이 Visual Studio 2017 설치시 개별 컴포넌트 탭의 에뮬레이터 항목에서 선택 설치 가능하다. 에뮬레이터 밑에 Visual Studio Emulator for Android 를 선택 설치 후 다시 안드로이드 버전을 배포해 보는데 되질 않았다. 이번에는 특별한 문제가 없어보이는데도 에뮬레이터에 앱이 실행되지 않았다. 문제가 없어 보인다. 그래서 뭐가 문제인지 찾다가 다음 링크에서 해결할 수 있었다. https://forums.xamarin.com/discussion/62307/xamarin-android-projects-failed-to-deploy-in-visual-studio-emulator-for-android 내 경우는 CPU 호환성과 레지스트리 둘 다 문제였다. 내 CPU 는 인텔 i7-6600U 이고 이것의 코드명이 스카이레이크인데 이 코드명을 가진 CPU 들이 Visual Studio Emulator for Android 에서 사용하는 Hyper-V 라는 기능과 문제가 있었던 것이다. 이 문제는 다음과 같은 방법으로 해결되었다. Hyper-V 매니저를 열고 가상 머신의 설정 화면을 연다. 설정을 변경할 에뮬레이터를 선택 후 마우스 오른쪽 버튼 클릭하여 설정 선택 프로세서 &amp;gt; 호환성 메뉴에서 Migrate to a physical computer with a different processor version 항목 체크를 해제한다. 그리고 두번째 문제인 안드로이드 SDK 툴 경로 레지스트리 문제는 다음과 같이 레지스트리에 Android SDK Tools 키를 추가해줬다. HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\ 다른 사람들하곤 다르게 해당 키가 없었기 때문에 “Path” 라는 항목을 추가하고 안드로이드 SDK Tools 전체 경로를 값으로 설정해줬다. 이 안드로이드 SDK Tools 전체 경로는 아래에서 찾을 수 있다. Visual Studio &amp;gt; 툴 &amp;gt; 옵션 &amp;gt; Xamarin &amp;gt; 안드로이드 설정 &amp;gt; 안드로이드 SDK 경로 레지스트리에 복사 붙여넣기 마침내, 디버깅 했을 때 output 윈도우에 다른게 보였고 에뮬레이터에서 앱이 정상적으로 실행되었다. 배포 성공!! Happy Coding!</summary></entry><entry><title type="html">Coming Soon</title><link href="https://bradkwon.github.io/blog/2017/11/07/coming-soon/" rel="alternate" type="text/html" title="Coming Soon" /><published>2017-11-07T00:00:00+01:00</published><updated>2017-11-07T00:00:00+01:00</updated><id>https://bradkwon.github.io/blog/2017/11/07/coming-soon</id><content type="html" xml:base="https://bradkwon.github.io/blog/2017/11/07/coming-soon/">&lt;p&gt;Coming soon..&lt;/p&gt;</content><author><name></name></author><summary type="html">Coming soon..</summary></entry></feed>